<?xml version="1.0"?>
<!-- ==================================================== -->
<!--     Ant build file for:                              -->
<!--     MIC Robustness Components                        -->
<!-- ==================================================== -->

<project name="mgmt_agent" default="build" basedir=".">

  <!-- set global properties for this build -->
  <property environment="env"/>
  <property name="cougaar" value="${env.COUGAAR_INSTALL_PATH}"/>
  <property name="host" value="${env.HOST}"/>
  <property name="node" value="RestartNode"/>
  <property name="persistenceEnabled" value="false"/>
  <property name="persistenceInterval" value="30000"/>
  <property name="packageDir" value="org/cougaar/tools/robustness"/>

  <!-- Define location of 3rd-party libraries -->
  <property name="lib" value="lib" />

  <!-- for JavaDoc -->
  <property name="packageNames" value="org.cougaar.tools.robustness.ma.plugins,
                                       org.cougaar.tools.robustness.ma.test"/>

  <!-- standard directories -->
  <property name="classes" value="classes"/>
  <property name="doc" value="doc"/>
  <property name="src" value="src"/>
  <property name="test" value="test"/>
  <property name="lib" value="lib"/>
  <property name="jar" value="Robustness_mic_${ant.project.name}.jar"/>
  <property name="workspace" value="tmp"/>
  <property name="release" value="../mic-tic"/>

  <!-- Initialization target -->
  <target name="init" >
    <mkdir dir="${lib}"/>
    <mkdir dir="${classes}"/>
  </target>

  <target name="build" description="Compiles all source and build JAR file"
          depends="init, compile, jar">
  </target>

  <target name="compile">
    <!-- Compile the java code into ${classes} -->
    <javac srcdir="${src}" destdir="${classes}">
      <classpath>
        <fileset dir="${cougaar}/lib">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${cougaar}/sys">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="./lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="compile-test">
    <!-- Compile the test code into ${classes} -->
    <javac srcdir="${test}/src" destdir="${classes}">
      <classpath>
        <fileset dir="${cougaar}/lib">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${cougaar}/sys">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <!-- Builds jar file -->
  <target name="jar" description="Creates jar file">
    <!-- Put everything in ${classes} into a jar file -->
    <delete file="${lib}/${jar}" />
    <jar jarfile="${lib}/${jar}">
      <fileset dir="${classes}"
        includes="${packageDir}/**"
        excludes="**/cvs/*,**/*.bak"
      />
    </jar>
  </target>

  <!-- Deletes generated files -->
  <target name="clean" description="Deletes generated files">
    <delete dir="${classes}"/>
    <delete dir="${doc}/api"/>
  </target>

  <!-- Generates javadoc -->
  <target name="javadoc" description="Creates JavaDoc documentation">
    <mkdir dir="doc/api"/>
    <javadoc packagenames="${packageNames}"
           sourcepath="src"
           destdir="doc/api"
           author="false"
           version="false"
           use="true"
           windowtitle="Ultralog Robustness"
           doctitle="Ultralog Robustness">
      <group title="Robustness" packages="${packageNames}"/>
      <classpath>
        <pathelement location="${basedir}/${classes}"/>
        <fileset dir="${cougaar}/lib">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${cougaar}/sys">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="./lib">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javadoc>
  </target>

  <!-- initializes community tables in configdb from xmlfile -->
  <target name="xmltodb" description="Initializes community tables in Config DB from XML file">
    <java dir="${basedir}" fork="yes"
      classname="org.cougaar.tools.robustness.ma.test.XmlToCsv">
      <classpath>
        <pathelement location="${lib}/${jar}"/>
        <fileset dir="${cougaar}/sys">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <arg line="test/data/communities.xml"/>
    </java>
    <java dir="${basedir}" fork="yes"
      classname="org.cougaar.tools.robustness.ma.test.CsvFileLoader">
      <classpath>
        <pathelement location="${lib}/${jar}"/>
        <fileset dir="${cougaar}/lib">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${cougaar}/sys">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <sysproperty key="org.cougaar.install.path" value="${cougaar}"/>
      <sysproperty key="org.cougaar.config.path" value="$$INSTALL/configs/common;$$CWD/test/data;$$CWD/test/configs/common"/>
      <arg line="community_attribute.csv community_entity_attribute.csv"/>
    </java>
  </target>

  <!-- creates zip archive of development files -->
  <target name="zip" description="Creates zip archive of development files">
    <tstamp/>
    <zip zipfile="${ant.project.name}-${DSTAMP}.zip"
      basedir="${basedir}"
      includes="src/**,
	      data/**,
        doc/**,
        example/**,
        regress/**,
        test/**,
        build.xml"
      excludes="**/cvs/**,doc/api/**,**/*.bak,.cvsignore"
    />
  </target>

  <!-- Runs ManagementAgent -->
  <target name="manager" description="Runs ManagementAgent">
    <antcall target="startnode" >
      <param name="node" value="ManagerNode" />
    </antcall>
  </target>

  <!-- Runs MiniTestConfig on one node -->
    <target name="minitestconfig" description="Runs MiniTestConfig society on a single node">
    <antcall target="startnode" >
      <param name="node" value="MiniTestConfigNode" />
    </antcall>
  </target>

  <!-- Runs a mininode1-->
  <target name="mininode1" description="Runs Partial MiniTestConfig society (1BDE, 3-69-ARBN, MCCGlobalMode) on a single node" >
    <antcall target="startnode" >
      <param name="node" value="MiniNode1" />
    </antcall>
  </target>

  <!-- Runs a mininode2-->
  <target name="mininode2" description="Runs Partial MiniTestConfig society (3ID) on a single node" >
    <antcall target="startnode" >
      <param name="node" value="MiniNode2" />
      <param name="persistenceEnabled" value="true" />
    </antcall>
  </target>

  <!-- Runs a mininode3-->
  <target name="mininode3" description="Runs Partial MiniTestConfig society (1BDE) on a single node" >
    <antcall target="startnode" >
      <param name="node" value="MiniNode3" />
      <param name="persistenceEnabled" value="true" />
    </antcall>
  </target>

  <!-- Runs a mininode4-->
  <target name="mininode4" description="Runs Partial MiniTestConfig society (3-69-ARBN, MCCGlobalMode) on a single node" >
    <antcall target="startnode" >
      <param name="node" value="MiniNode4" />
    </antcall>
  </target>

  <!-- Runs ManagementAgent and MiniTestConfig on one node -->
    <target name="combinednode" description="Runs ManagementAgent and MiniTestConfig society on a single node">
    <antcall target="startnode" >
      <param name="node" value="CombinedNode" />
    </antcall>
  </target>

  <!-- Runs a node without persistence enabled-->
  <target name="node" description="Runs a test node without persistence enabled (use -Dnode=XXX to specify node name)" >
    <antcall target="startnode" >
      <param name="node" value="${node}" />
    </antcall>
  </target>

  <!-- Runs a node with persistence enabled-->
  <target name="pnode" description="Runs a test node with persistence enabled (use -Dnode=XXX to specify node name)" >
    <antcall target="startnode" >
      <param name="node" value="${node}" />
      <param name="persistenceEnabled" value="true" />
    </antcall>
  </target>

  <target name="newrestartnode" description="Starts an empty restart node" >
    <mkdir dir="${workspace}/configs" />
    <copy file="test/configs/ma/${node}.ini" tofile="${workspace}/configs/${host}-${node}.ini" />
    <echo message="Starting node: ${host}-${node}" />
    <antcall target="node" >
      <param name="node" value="${host}-${node}" />
      <param name="persistenceEnabled" value="true" />
    </antcall>
  </target>

  <!-- Runs an empty node -->
  <target name="emptynode" depends="newrestartnode">
  </target>

  <!-- Starts a node -->
    <target name="startnode">
    <java dir="${basedir}" fork="yes"
      maxmemory="350m"
      classname="org.cougaar.bootstrap.Bootstrapper">
      <jvmarg value="-Xms100m"/>
      <jvmarg value="-Xbootclasspath/p:${cougaar}/lib/javaiopatch.jar"/>
      <classpath>
        <fileset dir="${cougaar}/lib">
          <include name="**/*.jar" />
        </fileset>
        <fileset dir="${cougaar}/sys">
          <include name="**/*.jar" />
        </fileset>
        <fileset dir="${lib}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
      <sysproperty key="org.cougaar.core.logging.config.filename" value="debug.properties"/>
      <sysproperty key="org.cougaar.node.name" value="${node}"/>
      <sysproperty key="org.cougaar.install.path" value="${cougaar}"/>
      <sysproperty key="org.cougaar.workspace" value="${workspace}"/>
      <sysproperty key="org.cougaar.core.persistence.enable" value="${persistenceEnabled}"/>
      <sysproperty key="org.cougaar.core.persistence.lazyInterval" value="${persistenceInterval}"/>
      <sysproperty key="org.cougaar.system.path" value="${lib}"/>
      <sysproperty key="org.cougaar.config.path" value="${workspace}/configs;$$INSTALL/configs/common;$$CWD/test/data;$$CWD/test/configs/ma;$$CWD/test/configs/minitestconfig;$$CWD/test/configs/common;$$INSTALL/configs/minitestconfig"/>
      <arg line="org.cougaar.core.node.Node"/>
    </java>
  </target>

  <!-- Runs YellowPages viewer utility -->
    <target name="ypviewer" description="Runs YellowPages viewer utility">
    <java dir="${basedir}" fork="yes"
      classname="org.cougaar.tools.robustness.ma.test.YellowPagesViewer">
      <classpath>
        <pathelement location="${lib}/${jar}"/>
        <fileset dir="${cougaar}/lib">
          <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${cougaar}/sys">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </java>
  </target>

  <!-- Copies latest working files to release directory -->
  <target name="movetorelease" description="Moves modified files to release directory">
    <copy todir="../${ant.project.name}" >
      <fileset dir="${basedir}"
        includes="build.xml,**/*.txt,**/*.java,**/*.properties,**/*.dat,**/*.ini,**/*.xml,**/*.csv,**/*.jar,**/*.rc"
        excludes="*.jpx,
                  tmp/**,
                  lib/**,
                  test/configs/common/host.xml,
                  test/src/org/cougaar/tools/robustness/ma/test/simulator/**" />
    </copy>
  </target>

  <!-- CVS checkout - TIC -->
  <target name="checkout-tic" description="CVS Checkout - TIC">
    <cvs cvsRoot=":ext:rsnyder@cvs.ultralog.net:/cvs/robustness/mic"
         package="${ant.project.name}"
         dest=".."
         command="update"
    />
  </target>

  <!-- CVS update - TIC -->
  <target name="update-tic" description="CVS Update - TIC">
    <cvs cvsRoot=":ext:rsnyder@cvs.ultralog.net:/cvs/robustness/mic"
         package="${ant.project.name}"
         dest=".."
         command="update"
    />
  </target>

  <!-- CVS Commit - TIC -->
  <target name="commit-tic" description="CVS Commit - TIC">
    <cvs cvsRoot=":ext:rsnyder@cvs.ultralog.net:/cvs/robustness/mic"
         package="${ant.project.name}"
         dest=".."
         command="commit"
    />
  </target>

  <!-- CVS Update - Local -->
  <target name="update-local" description="CVS Update - Local">
    <cvs cvsRoot=":pserver:ron@oak:/cvsroot"
         package="robustness"
         dest=".."
         command="update"
    />
  </target>

  <!-- CVS Commit - Local -->
  <target name="commit-local" description="CVS Commit - Local">
    <cvs cvsRoot=":pserver:ron@oak:/cvsroot"
         package="robustness"
         dest=".."
         command="-evi commit"
    />
  </target>

</project>
