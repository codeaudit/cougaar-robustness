###############################################################################

README file for Robustness Management Agent

Date: 11-July-2002

###############################################################################

This readme file contains a brief overview and instructions for running the
ManagementAgent software developed for UltraLog by the Adaptive Robustness
Thread Defense Team.


CONTACT INFO:

  Questions or comments regarding this document or the software included in this
  package should be sent to:

  Ron Snyder
  Mobile Intelligence Corp.
  email: ron@mobile-intelligence.com
  phone: 734-367-0430 x50


CHANGES IN THIS VERSION:

  1) HealthMonitorPlugin no longer requires that the name of the community to
     be monitores be specified as an argument.  The HealthMonitorPlugin now
     automatically determines the community name by looking for a community
     with the attribute "ComunityManager" with its name as an argument.
  2) RestartLocatorPlugin no longer requires that the name of restart hosts
     be specified as an argument.  By default the RestartLocatorPlugin will
     consider any community host/node as a potential restart location.
     Additional nodes and/or hosts may optionally be specified by the
     "restartNodes" and "restartHosts" arguments.

     The above changes eliminate the need to create ManagementAgent unqiue
     recipes for each robustness community in CSMART.

OVERVIEW:

  This package includes plugins and supporting classes used in the construction
  of a Management Agent.  A Management Agent is an agent that monitors member
  agents in a specified community and performs corrective action when an
  anomaly is detected.  Current capabilities include the ability to detect
  when an agent has died and to restart that on another node.

  1) HealthMonitorPlugin:  This plugin monitors the health status of all agents
     that are a member of a specified restart community.  At present the health
     status is determined by the receipt of heartbeats that are generated by
     each monitored agent.  When heartbeats are late/missed a ping message is
     sent to the agent to determine if the agent is still active.  If the ping
     fails or if the frequency of late heartbeats exceeds a specified threshold
     the DecisionPlugin is notified.  The HealthMonitorPlugin interacts with
     the following components:

     a) HeartbeatRequesterPlugin:  This plugin is also part of the Management
        Agent and interacts with the HeartbeatServerPlugin in the monitored
        agents to initiate heartbeat generation when requested by the
        HealthMonitorPlugin.  This plugin receives the heartbeats generated
        by the monitored agent and reports conditions that fall out side of
        specified tolerances.

     b) PingRequesterPlugin:  This plugin is part of the Management Agent and
        interacts with the PingServerPlugin in the monitored agents.  Ping
        requests are sent to the PingRequesterPlugin by the HealthMonitorPlugin
        when heartbeats are missed.

  2) DecisionPlugin:  This plugin is responsible for analyzing health anomalies
     detected by the HealthMonitorPlugin and initiating appropriate corrective
     action.  Currently the DecisionPlugin handles two conditions.  The first is
     a subset of what is commonly referred to as Use Case 1 (aka the
     "Sledgehammer").  This is the condition where one or more monitored agents
     have died and must be restarted.  The second condition will be a starting
     point for handling Use Cases 2 & 3.  In these use cases a monitored agent
     is still alive but is operating in a stressed mode due to a
     hardware/network problem or possibly some kind of denial of service attack.
     The current version of the DecisionPlugin does not perform any diagnosis
     or corrective action for UC 2/3.

     a) When an agent has been determined to be non-responsive a restart is
        initiated.  An agent is characterized as non-responsive by the
        HealthMonitorPlugin if heartbeats have ceased and active pings fail.
        In this situation the DecisionPlugin will obtain the hostname of a
        suitable location to restart the agent from the RestartLocatorPlugin.
        The Decision plugin will then publish a request for AgentActionPlugin to
        start the dead agent on the selected host.

     b) The other condition handled by the DecisonPlugin is the situation where
        a monitored agent is still alive but its heartbeats are consistently
        arriving late (or not at all).  This condition represents the first
        level determination of possible UC 2/3 scenario.  Additionaly logic
        will be required here in later versions to perform further analysis
        of available sensor data to determine the specific condition.  At
        present the DecisionPlugin simply decreases a heartbeat sensitivity
        parameter used by the HealthMonitorPlugin.  Over time this has the
        effect of causing the HealthMonitorPlugin to ignore late heartbeats.

  3) RestartLocatorPlugin:  This plugin is responsible for selecting a location
     for an agent restart.  This plugin will eventually interface with (or be
     replaced by) components being developed by the Scalability Defense Thread
     team.  At present this plugin performs a round robin selection of a host
     from a predetermined list of available hosts.  The list of available
     hosts is specified as an plugin argument.


SETUP:

  1) Configuring a restart community.

     Restart communities are defined in the configuration database.  Community
     definitions in the configuration database are used by the Community Service
     to assign an agent to its initial communities during startup.  Starting
     with Cougaar 9.4 CSMART provides the capability to create/edit community
     definitions.  Community definitions may also be created in an
     XML text file and imported into the database using a utility program.
     Community definitions for the MiniTestConfig and 1AD societies are part
     of this package and are found in file "test/configs/data/communities.xml".
     After editing this XML file the modified configurations can be imported
     into the configuration database by running the ant tool with the target
     "dbimport".  This ant target accepts 3 optional arguments that may be
     specified with the "-D" option.  Note that "experiment" and "assembly"
     are mutually exclusive.  Only one of these may be specified.  The most
     common use of this utility will be to import an experiment into CSMART
     and use the corresponding experiment name in the dbimport invocation.

       -Dexperiment=EXPERIMENT_NAME  Name of experiment that will use the
                                     community definition.
       -Dassembly=ASSEMBLY_ID        Assembly ID to associate community
                                     definitions.  By default this will be
                                     "COMM-DEFAULT_CONFIG".
       -Dfile=XML_FILENAME           The name of the community xml file that
                                     contains the community definitions.  The
                                     location of this file is determined by
                                     the org.cougaar.config.path property.  By
                                     default the dbimport ant target adds the
                                     directory "test/data" to the config path.
                                     If this argument is not specified the
                                     default is "communities.xml".


     Examples:

     Import the community definitions in the file "communities.xml" and
     associate with the community Assembly_Id used by experiment
     "tiny-1ad-trans-exprt".

     > ant -Dexperiment=tiny-1ad-trans-exprt -Dfile=communities.xml dbimport

     Import the community definitions in the file "communities.xml" and
     associate with the community Assembly_Id "COMM-DEFAULT_CONFIG".

     > ant -Dassembly=COMM-DEFAULT_CONFIG -Dfile=communities.xml dbimport


  2) Associating the name of a robustness community with a ManagementAgent.

     The ManagementAgent will monitor all members agents from a specified
     community.  The name of the community to be monitored is determined by the
     ManagementAgent during startup.  The ManagementAgent will look for a
     community that has the attribute "CommunityManager" with the value equal
     to its name.  The community definition that defines the restart community
     must define this attribute.

     Example:

      <Community Name="Enclave1Robustness-COMM" >
        <Attribute ID="CommunityManager" Value="Enclave1RobustnessManager" />
        <Attribute ID="CommunityType" Value="Robustness" />
        <Entity Name="Enclave1RobustnessManager" >
          <Attribute ID="EntityType" Value="Agent" />
          <Attribute ID="Role" Value="HealthReportConsumer" />
          <Attribute ID="Role" Value="ManagementAgent" />
        </Entity>
        <Entity Name="1-27-FABN" >
          ...
        </Entity>
     </Community>


TESTS:

  1) Using MiniTestConfig and ".ini" files.

    This section describes the steps for running some simple tests using the
    MiniTestConfig society and running from .ini files.

    a) Simple one computer test.  This test uses 4 console windows on a single
       computer.

       Test Setup:
       -----------

       1 - This test is executed using the ant build tool.  If ant has not
           been installed it can be obtained from the jakarta.apache.org website.
           If the test will be run from Windows-2000 or XP, ant version 1.5Beta
           should be used as the combination of java 1.4 and windows-2000/XP
           does not work correctly with ant version 1.4.x.  If Linux is used
           ant 1.4.x is ok.  This ant commands used in this example assume
           that the test is being run from the packages root directory (this is
           the top-level directory with the build.xml file).

       2 - The environment COUGAAR_INSTALL_PATH path must be defined and point
           to a directory containing Cougaar 9.2.2 or later.

       3 - The "lib" subdirectory directory must contain the following
           3 jar files.  All three jar files may be obtained from the
           cvs.ultralog.net web site.  The Robustness_mic_mgmt_agent.jar may
           also be created using the ant "build" target.

           Robustness_objs_sensors.jar
           Robustness_bbn_bbn.jar
           Robustness_mic_mgmt_agent.jar


       4 - Modify supplied alpreg.ini and cougaar.rc files.  The
           directory "test/configs/common" contains alpreg.ini and cougaar.rc
           files with some host/database configurations.  These files are put
           into the cougaar config path by the ant targets used in these tests.
           These files need to be updated to reflect the local
           configuration unless overridded by files in the
           COUGAAR_INSTALL_PATH/configs/common directory.

       5 - If the configuration database has not previously been loaded with
           the test community configurations import the definitions from the
           provided communities.xml file.  Use the ant target "dbimport".

       6 - Delete previous persistence files.  These are written to the
           subdirectory $COUGAAR_INSTALL_PATH/workspace/P.  If this directory
           exists delete it.


       Test Execution:
       ---------------

       1 - In the first console start the ManagementAgent.  Use the ant target
           "manager".

           > ant manager

       2 - Start agents 1BDE, 3-69-ARBN and MCCGlobalMode on the node
           MiniNode1.  Use the ant target "mininode1" for this.

           > ant mininode1

       3 - Start agent 3ID on a MiniNode2.  Use the ant target "mininode2".
           This node has persistence enabled with a frequency of 30 seconds.
           Shortly after the 3ID has started you should see a message indicating
           that a persistence snapshot has been created.

           > ant mininode2

       As the minitestconfig agents are started the ManagementAgent should
       print the message "Adding AGENTNAME" indicating that it has detected the
       agent and is sending a HeartbeatRequest.

       4 - After MiniNode2 has printed a message indicating that agent 3ID was
           persisted, kill the node by typing CTRL-C in the MiniNode2 console
           window.  Shortly after this the ManagementAgent should print some
           messages to its console indicating that heartbeats are not being
           received from agent 3ID.  A ping will be sent by the ManagementAgent
           to 3ID to confirm its status.  At this point the DecisionPlugin will
           obtain a nodename (mininode1 for this test) from the
           RestartLocatorPlugin and will initiate a restart of 3ID on the
           restart node using the AgentActionPlugin.

       5 - If all goes well agent 3ID should restart on the mininode1.  This
           will be evident by the generation of the dialog boxes used by 3ID.


    b) Multi computer test.  This test uses 2 or more comupters.  While
       various combinations are possible the best setup would be to run the
       ManagerNode, MiniNode1, and MiniNode2 on separate
       computers.  At a minimum MiniNode2 should run alone to simulate the
       loss of a computer.

       Test Setup:
       -----------

       Steps 1 - 5 from the one computer test defined in section "a" above.

       6 - Verify the the alpreg.ini file references the name of the host that
           will contain the name server.  This should be either the host that
           is running the manager node or the MiniNode1.


       Test Execution:
       ---------------

       1 - Start the ManagementAgent.

           > ant manager

       2 - Start agents 1BDE, 3-69-ARBN and MCCGlobalMode on the node
           MiniNode1.

           > ant mininode1

       3 - Start agent 3ID on a MiniNode2.  This should ideally be on a computer
           without any other nodes.

           > ant mininode2

       4 - After MiniNode2 has printed a message indicating that agent 3ID was
           persisted kill the node by typing CTRL-C in the MiniNode2 console
           window.

       6 - If all goes well agent 3ID should restart on the host
           running an mininode1.


  2) Using 1AD society and CSMART.

     Refer to the document Tiny1AD-howto.txt found at
     https://cvs.ultralog.net/bbn_robustness/source/bbn/Tiny1AD_howto.txt