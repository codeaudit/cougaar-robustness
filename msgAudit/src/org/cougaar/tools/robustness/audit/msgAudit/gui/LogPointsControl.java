/*  
 * LogPointsControl.java
 *
 * Created on February 16, 2003, 10:30 PM
 */ 
 
package LogPointAnalyzer.gui;
import LogPointAnalyzer.*;

import javax.swing.UIManager;
import java.awt.Component;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.table.*;
import javax.swing.DefaultCellEditor;
import javax.swing.JLabel;

import java.util.Vector;

/**
 *
 * @author  Administrator
 */
public class LogPointsControl extends javax.swing.JFrame {

    LogPointVectorMgmt mgmt;
    
    LogLevelsTableModel sendTableModel;
    LogLevelsTableModel recvTableModel;
    
    static final String[] initLevels = { "NEW", "NOT IN USE" };
    
    JComboBox cbSendOrdering = new JComboBox(initLevels);
    JComboBox cbRecvOrdering = new JComboBox(initLevels);

    /** Creates new form LogPointsControl */
    public LogPointsControl(LogPointVectorMgmt _mgmt) {
        mgmt = _mgmt;
        
        initComponents();
        
        sendTableModel = new LogLevelsTableModel(this, sendLogPointsTable, cbSendOrdering, true);
        recvTableModel = new LogLevelsTableModel(this, recvLogPointsTable, cbRecvOrdering, false);

        sendLogPointsTable.setAutoCreateColumnsFromModel(false);
        sendLogPointsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        sendLogPointsTable.setModel(sendTableModel);

        recvLogPointsTable.setAutoCreateColumnsFromModel(false);
        recvLogPointsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        recvLogPointsTable.setModel(recvTableModel);
        
        setTitle("Log Point Manager");
        setSize(540,480);      
        setHeaders();
        initSelectionModel();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lSendLogPoints = new javax.swing.JLabel();
        lTitle = new javax.swing.JLabel();
        lReceive = new javax.swing.JLabel();
        bCancel = new javax.swing.JButton();
        bApply = new javax.swing.JButton();
        sendScrollPane = new javax.swing.JScrollPane();
        sendLogPointsTable = new javax.swing.JTable();
        recvScrollPane = new javax.swing.JScrollPane();
        recvLogPointsTable = new javax.swing.JTable();

        getContentPane().setLayout(null);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        lSendLogPoints.setText("SEND LogPoints");
        getContentPane().add(lSendLogPoints);
        lSendLogPoints.setBounds(40, 60, 91, 16);

        lTitle.setFont(new java.awt.Font("Dialog", 1, 18));
        lTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lTitle.setText("LogPoint Display Configuration");
        getContentPane().add(lTitle);
        lTitle.setBounds(140, 20, 271, 24);

        lReceive.setText("RECEIVE LogPoints");
        getContentPane().add(lReceive);
        lReceive.setBounds(40, 240, 108, 16);

        bCancel.setText("Close");
        bCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCancelActionPerformed(evt);
            }
        });

        getContentPane().add(bCancel);
        bCancel.setBounds(280, 400, 73, 26);

        bApply.setText("Apply");
        bApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bApplyActionPerformed(evt);
            }
        });

        getContentPane().add(bApply);
        bApply.setBounds(170, 400, 65, 26);

        sendLogPointsTable.setBorder(new javax.swing.border.EtchedBorder());
        sendScrollPane.setViewportView(sendLogPointsTable);

        getContentPane().add(sendScrollPane);
        sendScrollPane.setBounds(40, 80, 440, 130);

        recvLogPointsTable.setBorder(new javax.swing.border.EtchedBorder());
        recvScrollPane.setViewportView(recvLogPointsTable);

        getContentPane().add(recvScrollPane);
        recvScrollPane.setBounds(40, 260, 440, 130);

        pack();
    }//GEN-END:initComponents

    private void bCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCancelActionPerformed
        hide();
    }//GEN-LAST:event_bCancelActionPerformed

    private void bApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bApplyActionPerformed
        // Add your handling code here:
        java.awt.Toolkit.getDefaultToolkit().beep();
    }//GEN-LAST:event_bApplyActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        hide();
    }//GEN-LAST:event_exitForm
    

    void initSelectionModel() {
        
        recvLogPointsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    java.awt.Point origin  = e.getPoint();
                    int row = recvLogPointsTable.rowAtPoint(origin);
                    int col = recvLogPointsTable.columnAtPoint(origin);
                    if (row == -1 && col != -1) { // no cell clicked
                        return;
                    } else {
                        rowSelected(row, col);
                    }
                }
            }
        });
    }
    
    
    void setHeaders() {

        DefaultTableCellRenderer labelRenderer = new DefaultTableCellRenderer();
        labelRenderer.setHorizontalAlignment(JLabel.CENTER);
        //DefaultTableModel dtm = (DefaultTableModel)messageTable.getModel();

        DefaultCellEditor sendEditor = new DefaultCellEditor(cbSendOrdering);
        DefaultCellEditor recvEditor = new DefaultCellEditor(cbRecvOrdering);
        
        //Init Send Table
        for (int k = 0; k < sendTableModel.getColumnCount(); k++) {
            TableCellRenderer renderer = null;
            TableCellEditor editor = null;
            switch (k) {
            case LogLevelsTableModel.COL_ORDER:
                    renderer = labelRenderer;
                    editor = sendEditor;
                    break;

            case LogLevelsTableModel.COL_LOGPOINT:
                    renderer = labelRenderer;
                    break;

            case LogLevelsTableModel.COL_CONFIG:
                    renderer = labelRenderer;
                    break;

            }
            if (renderer instanceof JLabel)
                    ((JLabel)renderer).setHorizontalAlignment(
                            LogLevelsTableModel.m_columns[k].align);
            //if (editor instanceof DefaultCellEditor)
            //        ((DefaultCellEditor)editor).setClickCountToStart(2);

            TableColumn column = new TableColumn(k,
                    LogLevelsTableModel.m_columns[k].width,
                    renderer, editor);
            sendLogPointsTable.addColumn(column);
        }

        
        //Init RecvTable
        LogPointLevelCellRenderer recvRenderer = new LogPointLevelCellRenderer(recvTableModel, this);
        for (int k = 0; k < recvTableModel.getColumnCount(); k++) {
            TableCellRenderer renderer = null;
            TableCellEditor editor = null;
            switch (k) {
            case LogLevelsTableModel.COL_ORDER:
                    renderer = recvRenderer;
                    editor = sendEditor;
                    break;

            case LogLevelsTableModel.COL_LOGPOINT:
                    renderer = recvRenderer;
                    break;

            case LogLevelsTableModel.COL_CONFIG:
                    renderer = recvRenderer;
                    break;

            }
            if (renderer instanceof JLabel)
                    ((JLabel)renderer).setHorizontalAlignment(
                            LogLevelsTableModel.m_columns[k].align);
            //if (editor instanceof DefaultCellEditor)
            //        ((DefaultCellEditor)editor).setClickCountToStart(2);

            TableColumn column = new TableColumn(k,
                    LogLevelsTableModel.m_columns[k].width,
                    renderer, editor);
            recvLogPointsTable.addColumn(column);
            System.out.println("**Added send column - " + column);
        }
        
        //JTableHeader header = messageTable.getTableHeader();
        //header.setUpdateTableInRealTime(false);
        
        
    }
    
    /*
     * Called to add one LogPointLevel entry
     *
     */
    public void addLogPoint(LogPointLevel _msg, boolean _isSend) {
     
        LogLevelsTableModel model; 
        JTable tbl;
        JComboBox box;

        if (_isSend) {
            model = sendTableModel;
            tbl = sendLogPointsTable;
            box = cbSendOrdering;
        } else {
            model = recvTableModel;
            tbl = recvLogPointsTable;
            box = cbRecvOrdering;
        }
        
        //Increment list of numbers in ComboBox
        box.addItem(""+(box.getItemCount()-2)); //minus 2 for (NEW & NOT_IN_USE)
        
        int row = model.addRow(_msg);
        model.fireTableDataChanged();
        tbl.tableChanged(new TableModelEvent(
            model, row, row, TableModelEvent.ALL_COLUMNS,
            TableModelEvent.INSERT));
        //messageTable.setRowSelectionInterval(row,row);
        tbl.repaint();
   }


    void rowSelected(int row, int col) {

        try {
            int val = javax.swing.JOptionPane.showConfirmDialog(this,
                                    "Designate this Log Point Level as the FINAL Log Point?",
                                    "Confirm",
                                    javax.swing.JOptionPane.OK_CANCEL_OPTION );
            if (val == javax.swing.JOptionPane.OK_OPTION) {
                LogPointLevel lpl = (LogPointLevel)recvTableModel.getValueAt(row);
                this.mgmt.finalLogPointChanged(lpl, row);
                recvTableModel.fireTableDataChanged();
            }
            
        } catch (java.awt.HeadlessException he) {}
        
    }
    
    
//    public void updateData() {
//        tableModel.fireTableDataChanged();
//    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lReceive;
    private javax.swing.JTable sendLogPointsTable;
    private javax.swing.JLabel lSendLogPoints;
    private javax.swing.JButton bApply;
    private javax.swing.JScrollPane sendScrollPane;
    private javax.swing.JTable recvLogPointsTable;
    private javax.swing.JScrollPane recvScrollPane;
    private javax.swing.JLabel lTitle;
    private javax.swing.JButton bCancel;
    // End of variables declaration//GEN-END:variables
    
}


class LogLevelsTableModel extends AbstractTableModel
{
    
	public static final ColumnData m_columns[] = {
		new ColumnData( "Active Order", 100, JLabel.LEFT ),
		new ColumnData( "LogPoint Name", 250, JLabel.CENTER ),
		new ColumnData( "From Config", 100, JLabel.CENTER ),
	};

	public static final int COL_ORDER = 0;
	public static final int COL_LOGPOINT = 1;
	public static final int COL_CONFIG = 2;

	public static final String[] CATEGORIES = {
            "Active Order", "LogPoint Name", "In Config File"
        };

	protected LogPointsControl m_parent;
	protected Vector m_vector;
        JTable table;
        JComboBox combobox;
        JLabel label;

        boolean isSend;

	public LogLevelsTableModel(LogPointsControl parent, JTable _t, JComboBox _box, boolean _isSend) {
		m_parent = parent;
		m_vector = new Vector();
                combobox = _box;
                table = _t;
                isSend = _isSend;
	}

	public int getRowCount() {
		return m_vector==null ? 0 : m_vector.size();
	}

	public int getColumnCount() {
		return m_columns.length;
	}

	public String getColumnName(int nCol) {
		return m_columns[nCol].title;
	}

	public boolean isCellEditable(int nRow, int nCol) {
            if (nCol == 0)
                return true;
            else
                return false;
	}

	public Object getValueAt(int nRow, int nCol) {
		if (nRow < 0 || nRow>=getRowCount())
			return "";
		LogPointLevel row = (LogPointLevel)m_vector.elementAt(nRow);
		switch (nCol) {
			case COL_ORDER:
                            Integer pos = m_parent.mgmt.getDisplayPosition(row, nRow) ; 
                            if (pos == LogPointVectorMgmt.NEW)
                                return "NEW";
                            else if (pos == LogPointVectorMgmt.NOT_IN_USE)
                                return "NOT IN USE";
                            else                                
                                return  ""+row.seq();
			case COL_LOGPOINT: 
				return row.logPointName();
			case COL_CONFIG:
				return (row.fromConfig() ? "X" : "");
		}
		return "";
	}

	public Object getValueAt(int nRow) {
		if (nRow < 0 || nRow>=getRowCount())
			return null;
		return (LogPointLevel)m_vector.elementAt(nRow);
	}
         
	public int addRow(LogPointLevel _msg) {
            synchronized(m_vector) {
                m_vector.addElement(_msg);
                return m_vector.size();
            }
	}
}

/* This class renders the Log Point name in red if it is the final log point */
class LogPointLevelCellRenderer extends javax.swing.table.DefaultTableCellRenderer {
    
    LogLevelsTableModel tableModel;
    LogPointsControl m_parent;
    public LogPointLevelCellRenderer(LogLevelsTableModel _tableModel, LogPointsControl _parent) {        
       super();   
       tableModel = _tableModel;
       m_parent = _parent;
    }
    
    public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table,
                           Object value,
                           boolean isSelected,
                           boolean hasFocus,
                           int row,
                           int col)
    {
        
        LogPointLevel lpl = (LogPointLevel)tableModel.getValueAt(row);
        
        java.awt.Font font2 = new java.awt.Font("SanSerif", java.awt.Font.PLAIN, 12);
      
        this.setFont(font2);
        setForeground(java.awt.Color.black);
        if (col == LogLevelsTableModel.COL_LOGPOINT) {
            if (m_parent.mgmt.isFinalLogPointPos(row)) {
                setForeground(java.awt.Color.red);
            } else {
                setForeground(java.awt.Color.black);
            }
        }
        
        setText((String)value);
        return this;
    }
}
