/*
 * ProblemMessagesDisplay.java
 *
 * Created on April 22, 2003, 3:21 PM
 */

package org.cougaar.tools.robustness.audit.msgAudit.gui;

import javax.swing.JList;
import java.util.Iterator;
import java.util.Hashtable;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.AbstractListModel;
import javax.swing.JOptionPane;

import javax.swing.JLabel;
import javax.swing.ListCellRenderer;
import java.awt.Component;

import org.cougaar.tools.robustness.audit.msgAudit.*;

/**
 *
 * @author  Administrator
 */
public class ProblemMessagesDisplay extends javax.swing.JFrame {
    
    private ProblemMessageManager pmm;
    

    private boolean aProblemIsSelected = false;
    private boolean anAgentIsSelected = false;

    private boolean everyMap = false;
    private AgentListModel agentModel;
    private int autoResolveCount = 0;
    
    /** Creates new form ProblemMessagesDisplay */
    public ProblemMessagesDisplay(ProblemMessageManager _pmm) {
        
        pmm = _pmm;
        
        initComponents();
        
        lProblemList.setModel(new ProblemsListModel());
        lProblemList.setCellRenderer(new MsgCellRenderer());
        agentModel = new AgentListModel();
        lAgentList.setModel(agentModel);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel2 = new javax.swing.JPanel();
        spProblemList = new javax.swing.JScrollPane();
        lProblemList = new javax.swing.JList();
        bResolveTo = new javax.swing.JButton();
        spAgentList = new javax.swing.JScrollPane();
        lAgentList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        lTitle = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        bAutoResolve = new javax.swing.JCheckBox();
        bApply = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        bShowProbables = new javax.swing.JToggleButton();
        bAbort = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        lAutoResolve = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        miClose = new javax.swing.JMenuItem();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.X_AXIS));

        spProblemList.setBorder(new javax.swing.border.TitledBorder(null, "Problem Messages (Dest Addr)", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        spProblemList.setName("spProblemMessages");
        lProblemList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lProblemList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lProblemListValueChanged(evt);
            }
        });

        spProblemList.setViewportView(lProblemList);

        jPanel2.add(spProblemList);

        bResolveTo.setFont(new java.awt.Font("Dialog", 1, 10));
        bResolveTo.setText("Resolve To-->");
        bResolveTo.setEnabled(false);
        bResolveTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bResolveToActionPerformed(evt);
            }
        });

        jPanel2.add(bResolveTo);

        spAgentList.setBorder(new javax.swing.border.TitledBorder(null, "Agent List", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        lAgentList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lAgentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lAgentListValueChanged(evt);
            }
        });

        spAgentList.setViewportView(lAgentList);

        jPanel2.add(spAgentList);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        lTitle.setFont(new java.awt.Font("Dialog", 1, 18));
        lTitle.setText("Problem Message Display");
        jPanel1.add(lTitle);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 10));

        bAutoResolve.setFont(new java.awt.Font("Dialog", 0, 10));
        bAutoResolve.setText("AutoResolve");
        bAutoResolve.setToolTipText("If only one agent matches, then map to it automatically");
        bAutoResolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAutoResolveActionPerformed(evt);
            }
        });

        jPanel3.add(bAutoResolve);

        bApply.setText("Apply Changes");
        bApply.setEnabled(false);
        bApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bApplyActionPerformed(evt);
            }
        });

        jPanel3.add(bApply);

        jButton1.setText("Refresh");
        jButton1.setName("bRefresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.add(jButton1);

        bShowProbables.setText("Showing All Agents");
        bShowProbables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bShowProbablesActionPerformed(evt);
            }
        });

        jPanel3.add(bShowProbables);

        bAbort.setText("Abort Changes");
        bAbort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAbortActionPerformed(evt);
            }
        });

        jPanel3.add(bAbort);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 40, 5));

        lAutoResolve.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lAutoResolve.setText("AR=0");
        lAutoResolve.setToolTipText("The # of msgs that have been auto-resolved");
        jPanel4.add(lAutoResolve);

        jPanel3.add(jPanel4);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        mFile.setText("File");
        miClose.setText("Close Window");
        miClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCloseActionPerformed(evt);
            }
        });

        mFile.add(miClose);
        jMenuBar1.add(mFile);
        setJMenuBar(jMenuBar1);

        pack();
    }//GEN-END:initComponents

    private void bAutoResolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAutoResolveActionPerformed
        pmm.setAutoResolve(bAutoResolve.isEnabled());
        if (bAutoResolve.isEnabled()) { //update list to remove all resolved msgs
            pmm.refresh();
        }
    }//GEN-LAST:event_bAutoResolveActionPerformed

    private void bAbortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAbortActionPerformed
        DefaultListModel model = (DefaultListModel)lProblemList.getModel();
        int size = model.getSize();
        for (int i=0; i < size; i++) {
            ProblemMessage pm = (ProblemMessage)model.get(i);
            if (pm.toBeModified()) {
                pm.abortNewName();
            }
        }
    }//GEN-LAST:event_bAbortActionPerformed

    private void miCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCloseActionPerformed
        this.hide();
    }//GEN-LAST:event_miCloseActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        Object[] options = { "OK", "CANCEL" };
        int choice = JOptionPane.showOptionDialog(null, "Refresh may affect your changes so far. Want to continue?", "Warning", 
                                     JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                                     null, options, options[0]);
        
        if (choice == 0) {
            pmm.refresh();
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void lProblemListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lProblemListValueChanged
        aProblemIsSelected = (lProblemList.getSelectedIndex() >= 0) ? true : false;    
        if (aProblemIsSelected) {
            if (bShowProbables.isSelected()) {
                ProblemMessage pm = (ProblemMessage)lProblemList.getSelectedValue();
                agentModel.filter(pm.getName());
            }
        }
        checkEnableResolve();
    }//GEN-LAST:event_lProblemListValueChanged

    private void lAgentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lAgentListValueChanged
        anAgentIsSelected = (lAgentList.getSelectedIndex() >= 0) ? true : false;        
        checkEnableResolve();
    }//GEN-LAST:event_lAgentListValueChanged

    //Set to true if both a msg and an agent have been selected, o.w. set to false
    private void checkEnableResolve() {
        if ( aProblemIsSelected && anAgentIsSelected ) {
            bResolveTo.setEnabled(true);
        } else {
            bResolveTo.setEnabled(false);
        }
    }

    public void incAutoResolvedCount() {
        lAutoResolve.setText("AR="+autoResolveCount++);
    }
    
    
    private void bResolveToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bResolveToActionPerformed
        // Add your handling code here:
        
        //get selected message
        ProblemMessage pm = (ProblemMessage)lProblemList.getSelectedValue();
        
        //get selected agent
        AgentData agent = (AgentData)lAgentList.getSelectedValue();

        boolean applyToAll = false;
        
        //assign name (depends on what isSend is)
        if (pm != null && agent != null) {
                        
            if (!everyMap) {
                Object[] options = { "Remember this mapping", "Use only on this msg", "Remember every mapping", "Cancel" };
                int choice = JOptionPane.showOptionDialog(this, "Automatically apply this mapping to future messages?", "Question", 
                                             JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                                             null, options, options[0]);

                if (choice == 0) {
                    pmm.addToMappings(pm.getName(), agent.name());
                    applyToAll = true;
                } else if (choice == 2) {
                    everyMap = true;
                    applyToAll = true; // true for this time too
                    pmm.addToMappings(pm.getName(), agent.name());
                } else if (choice == 3) { //user cancelled action
                    return;
                }

            } else {
                pmm.addToMappings(pm.getName(), agent.name());
                applyToAll = true;
            }
            
            applyMap(pm, agent.name(), applyToAll);

        } else { //Should not occur
            JOptionPane.showMessageDialog(this, "Agent or Message selection was null", "alert", JOptionPane.ERROR_MESSAGE); 
        }
        
        //Now that a mod has been performed, allow change to be applied
        bApply.setEnabled(true);

        
    }//GEN-LAST:event_bResolveToActionPerformed

    
    /**
     * Apply map to one or more problem messages
     */
    private void applyMap(ProblemMessage _pm, String _newName, boolean _all) {
     
        _pm.setNewName(_newName);            

        ProblemsListModel model = (ProblemsListModel)lProblemList.getModel();

        if (_all) { //apply to all PMs with the same name

            String oldName = _pm.getName();
            int size = model.getSize();
            for (int i=0; i < size; i++) {
                ProblemMessage pm = (ProblemMessage)model.get(i);
                if (pm.getName().equals(oldName)) {
                    pm.setNewName(_newName);
                }
            }  
        }
        //Refresh to display changes
        model.refresh();
                
    }
    
    
    
    
    private void bShowProbablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bShowProbablesActionPerformed

        if (bShowProbables.isSelected()) {
            bShowProbables.setText("Showing Probables");
            if (lProblemList.getSelectedIndex() >= 0) {
                ProblemMessage pm = (ProblemMessage)lProblemList.getSelectedValue();
                agentModel.filter(pm.getName());
            }
        } else {
            bShowProbables.setText("Showing All Agents");
            agentModel.showAll();
        }
        //lAgentList.repaint();
        //lAgentList.
    }//GEN-LAST:event_bShowProbablesActionPerformed

    private void bApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bApplyActionPerformed

        //Disable resolve for now
        bResolveTo.setEnabled(false);
        
        //reset button - no more mods
        bApply.setEnabled(false);
        
        Vector mods = new Vector();
        
        //Look thru the list of problems & extract the modified msgs        
        DefaultListModel model = (DefaultListModel)lProblemList.getModel();
        int size = model.getSize();
        for (int i=0; i < size; i++) {
            ProblemMessage pm = (ProblemMessage)model.get(i);
            if (pm.toBeModified()) {
                pm.commitNewName();
                mods.add(pm);
            }
        }
        
        //Now remove the changed messages from the problem list
        Iterator iter = mods.iterator();
        while (iter.hasNext()) {
            model.removeElement(iter.next());
        }        
        
        //Apply changes
        pmm.applyChanges(mods);
        
        //Reactivate, if activated before.
        checkEnableResolve();

        
    }//GEN-LAST:event_bApplyActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.hide();
    }//GEN-LAST:event_exitForm
    
    

    /**
     * Set the list of known agents
     */
    public void setAgentList(Vector _v) {
        AgentListModel model = (AgentListModel)lAgentList.getModel();
        model.removeAllElements();
        for (int i=0; i<_v.size(); i++) {
            model.addElement((AgentData)_v.get(i));
        }        
    }

    
    /**
     * Set the list of problem messages
     */
    public void setProblemList(Vector _v) {
        DefaultListModel model = (DefaultListModel)lProblemList.getModel();
        model.removeAllElements();
        for (int i=0; i<_v.size(); i++) {
            model.addElement(_v.get(i));
        }                
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lAutoResolve;
    private javax.swing.JButton bAbort;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JList lProblemList;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JList lAgentList;
    private javax.swing.JScrollPane spProblemList;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton bApply;
    private javax.swing.JMenu mFile;
    private javax.swing.JCheckBox bAutoResolve;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToggleButton bShowProbables;
    private javax.swing.JLabel lTitle;
    private javax.swing.JButton bResolveTo;
    private javax.swing.JScrollPane spAgentList;
    private javax.swing.JMenuItem miClose;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
    
    
    class AgentListModel extends AbstractListModel {
        
        Vector allData;
        Vector filteredData;
        
        boolean isFilterOn = false;
        String filterOn = null;
        
        public AgentListModel() {
            allData = new Vector();
            filteredData = new Vector();
        }
        
        public int getSize() {
            
            if (!isFilterOn) {
                return allData.size();
            } else {
               return filteredData.size();
            }
        }
        
        public void showAll() {
            isFilterOn = false;
            this.fireContentsChanged(this,0,allData.size());
        }
        
        public void filter(String _msgName) {
            isFilterOn = true;
            
            String partialName = strip(_msgName);
            
            if (partialName == null) {
             
                //Alert
                JOptionPane.showMessageDialog(ProblemMessagesDisplay.this, "Agent name was null", "alert", JOptionPane.ERROR_MESSAGE); 
                
                filteredData.removeAllElements();
                fireIntervalRemoved(this, 0, 0);                
                return;
            }
            
            if (filterOn != null && filterOn.equals(partialName)) {
                //no change, keep current list
                return;
            }
            filterOn = partialName;
            filteredData.removeAllElements();
            
            Iterator i = allData.iterator();
            while (i.hasNext()) {
                addAgentToFilter((AgentData)i.next());
            }
            
            fireContentsChanged(this,0,filteredData.size());
        }
    
        public void removeAllElements() {
            int allDataSize = allData.size();
            int filteredDataSize = filteredData.size();
            allData.removeAllElements();
            filteredData.removeAllElements();
            if (isFilterOn) { // then add to filteredData now
                fireIntervalRemoved(this, 0, 0);
            } else { 
                fireIntervalRemoved(this,0, 0);
            }
        }
        
        public void addElement(AgentData _agent) {
            allData.add(_agent);
            if (isFilterOn) { // then add to filteredData now
                if (addAgentToFilter(_agent)) {
                    fireContentsChanged(this,filteredData.size(),filteredData.size());                
                }
            } else { 
                fireIntervalAdded(this,allData.size(),allData.size());
            }
        }
        
        public AgentData get(int _pos) {
            
            if (!isFilterOn) {
                return (AgentData)allData.get(_pos);
            } else {
               return (AgentData)filteredData.get(_pos);
            }
        }
        
        boolean addAgentToFilter(AgentData _agent) {
            
            if (_agent.name().indexOf(filterOn)>=0) {
                filteredData.add(_agent);                
                return true;
            }
            return false;
            
        }
        
        //Strip off known error prefixes & suffixes
        String strip(String _name) {
         
            if (_name.startsWith("NULL.")) {
                _name = _name.substring(5);
                //Now check other end
                if (_name.endsWith(".NULL")) {
                    _name = _name.substring(0,_name.length()-5);
                }
            } else  if (_name.startsWith("NameLookupException.")) {
                _name = _name.substring(20);
            }
            return _name;
        }
        
        /**
         * Required by API. Calls get()
         */
        public Object getElementAt(int param) {
            return get(param);
        }
        
    }

    class ProblemsListModel extends DefaultListModel {
     
        public void refresh() {
            fireContentsChanged(this, 0, this.size());            
        }
    }
    
    
    class MsgCellRenderer extends JLabel implements ListCellRenderer {

         // This is the only method defined by ListCellRenderer.
         // We just reconfigure the JLabel each time we're called.
         public Component getListCellRendererComponent(
           JList list,
           Object value,            // value to display
           int index,               // cell index
           boolean isSelected,      // is the cell selected
           boolean cellHasFocus)    // the list and the cell have the focus
         {
             String s = value.toString();
             setText(s);
             
             ProblemMessage pm = (ProblemMessage)value;
          
             if (isSelected) {
                 //setBackground(list.getSelectionBackground());
                 setBackground(list.getSelectionBackground());
                 setForeground(list.getSelectionForeground());
             }
             else {
                 setBackground(list.getBackground());
                 setForeground(list.getForeground());
             }

             if (pm.toBeModified()) { //Mark ones that have been mapped
                if (isSelected) {
                     setForeground(java.awt.Color.black);                 
                } else {
                     setForeground(java.awt.Color.blue);                 
                }
             } 
             
             setEnabled(list.isEnabled());
             setFont(list.getFont());
             setOpaque(true);
             return this;
         }
     }
    
    
}
