/* 
 * MessageDetail.java
 * 
 * Created on February 19, 2003, 10:32 AM
 */
 
package org.cougaar.tools.robustness.audit.msgAudit.gui;
import org.cougaar.tools.robustness.audit.msgAudit.*;
import org.cougaar.tools.robustness.audit.msgAudit.event.*;

import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.table.*;
import javax.swing.JLabel;

import java.util.Vector;
import java.util.Iterator;


/**
 *
 * @author  Administrator
 */
public class MessageDetail extends javax.swing.JFrame implements EventListener {
    
    LogPointTableModel tableModel = null;
    Message msg;
    
    /** Creates new form MessageDetail */
    public MessageDetail(Message _msg) {
        
        msg = _msg;
        
        initComponents();
        
        logPointsTable.setAutoCreateColumnsFromModel(false);
        logPointsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        tableModel = new LogPointTableModel(this);
        logPointsTable.setModel(tableModel);
        
        vFrom.setText(msg.getAgent().name());
        vTo.setText(msg.dest());
        vSeqNum.setText(""+msg.getSeqNum());
        
        setHeaders();
        initSelectionModel();
        
        setSize(660,450);

        //Register for events
        EventHandler.handler().addListener(this);
        
    }
    
    public Message getMessage() { return msg; }
    
    public void setMessage(Message _msg) {
        msg = _msg;
        vFrom.setText(msg.getAgent().name());
        vTo.setText(msg.dest());
        vSeqNum.setText(""+msg.getSeqNum());
        
        tableModel.deleteAll();
        Iterator iter = msg.sendVector().iterator();
        while (iter.hasNext()) {
            LogPointEntry lpe = (LogPointEntry)iter.next();
            if (lpe!= null) {
                this.addMessage(lpe);
            }
        }
        iter = msg.recvVector().iterator();
        while (iter.hasNext()) {
            LogPointEntry lpe = (LogPointEntry)iter.next();
            if (lpe!= null) {
                this.addMessage(lpe);
            }
        }
        updateData();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lTitle = new javax.swing.JLabel();
        lFrom = new javax.swing.JLabel();
        lTo = new javax.swing.JLabel();
        lSeq = new javax.swing.JLabel();
        vFrom = new javax.swing.JLabel();
        vTo = new javax.swing.JLabel();
        vSeqNum = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logPointsTable = new javax.swing.JTable();
        bOK = new javax.swing.JButton();
        bRefresh = new javax.swing.JButton();

        getContentPane().setLayout(null);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        lTitle.setFont(new java.awt.Font("Dialog", 1, 18));
        lTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lTitle.setText("Message Detail");
        getContentPane().add(lTitle);
        lTitle.setBounds(260, 10, 150, 30);

        lFrom.setText("From:");
        getContentPane().add(lFrom);
        lFrom.setBounds(40, 50, 40, 16);

        lTo.setText("To:");
        getContentPane().add(lTo);
        lTo.setBounds(40, 70, 40, 16);

        lSeq.setText("Seq #:");
        getContentPane().add(lSeq);
        lSeq.setBounds(40, 90, 35, 16);

        vFrom.setText("jLabel1");
        getContentPane().add(vFrom);
        vFrom.setBounds(90, 50, 210, 16);

        vTo.setText("jLabel2");
        getContentPane().add(vTo);
        vTo.setBounds(90, 70, 220, 16);

        vSeqNum.setText("jLabel3");
        getContentPane().add(vSeqNum);
        vSeqNum.setBounds(90, 90, 60, 16);

        jScrollPane1.setViewportView(logPointsTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(43, 123, 580, 230);

        bOK.setText("OK");
        bOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOKActionPerformed(evt);
            }
        });

        getContentPane().add(bOK);
        bOK.setBounds(240, 360, 51, 26);

        bRefresh.setText("Refresh");
        bRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRefreshActionPerformed(evt);
            }
        });

        getContentPane().add(bRefresh);
        bRefresh.setBounds(360, 360, 79, 26);

        pack();
    }//GEN-END:initComponents

    private void bRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRefreshActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_bRefreshActionPerformed

    private void bOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOKActionPerformed
        hide();
    }//GEN-LAST:event_bOKActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        hide(); //System.exit(0);
    }//GEN-LAST:event_exitForm
    
    
    public void setToAgent(String _d) { vTo.setText(_d); }
    public void setSeqNum(int _n) { this.vSeqNum.setText(""+_n); }

    
    void setHeaders() {

        DefaultTableCellRenderer labelRenderer = new DefaultTableCellRenderer();
        LogPointCellRenderer logpointRenderer = new LogPointCellRenderer(tableModel);
        labelRenderer.setHorizontalAlignment(JLabel.LEFT);
        //DefaultTableModel dtm = (DefaultTableModel)logPointsTable.getModel();

        for (int k = 0; k < tableModel.getColumnCount(); k++) {
            TableCellRenderer renderer = null;
            TableCellEditor editor = null;
            switch (k) {
            case LogPointTableModel.COL_TIME:
                    renderer = labelRenderer;
                    break;

            case LogPointTableModel.COL_LOGPOINT:
                    renderer = logpointRenderer;
                    break;

            case LogPointTableModel.COL_TYPE:
                    renderer = labelRenderer;
                    break;
            }
            if (renderer instanceof JLabel)
                    ((JLabel)renderer).setHorizontalAlignment(
                            LogPointTableModel.m_columns[k].align);
            //if (editor instanceof DefaultCellEditor)
            //        ((DefaultCellEditor)editor).setClickCountToStart(2);

            TableColumn column = new TableColumn(k,
                    LogPointTableModel.m_columns[k].width,
                    renderer, editor);
            logPointsTable.addColumn(column);
        }

        //JTableHeader header = logPointsTable.getTableHeader();
        //header.setUpdateTableInRealTime(false);
        
        
    }
    
    void initSelectionModel() {
        
        logPointsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if (e.getClickCount() == 2) {
                    java.awt.Point origin  = e.getPoint();
                    int row = logPointsTable.rowAtPoint(origin);
                    int col = logPointsTable.columnAtPoint(origin);
                    if (row == -1 && col != -1) { // no cell clicked
                        return;
                    } else {
                        rowSelected(row, col);
                    }
                }
            }
        });
    }
    
    /*
     * Does nothing yet.
     *
     */
    void rowSelected(int _row, int _col) {
        LogPointEntry lpe = (LogPointEntry)tableModel.getValueAt(_row);
    }
    

    /*
     * Called to add one agent
     *
     */
    public void addMessage(LogPointEntry _lpe) {
     
        int row = tableModel.addRow(_lpe);
        logPointsTable.tableChanged(new TableModelEvent(
            tableModel, row, row, TableModelEvent.ALL_COLUMNS,
            TableModelEvent.INSERT));
        //logPointsTable.setRowSelectionInterval(row,row);
        logPointsTable.repaint();
   }

    public void updateData() {

        tableModel.fireTableDataChanged();
    
    }    
    
    public void newFinalPointEvent(LogPointLevel _lpl) {
        //System.out.println("Fired update data on newFinalPointEvent");
        if (this.isVisible())
            updateData();
    }    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel vTo;
    private javax.swing.JButton bRefresh;
    private javax.swing.JLabel vSeqNum;
    private javax.swing.JLabel vFrom;
    private javax.swing.JTable logPointsTable;
    private javax.swing.JLabel lTo;
    private javax.swing.JLabel lSeq;
    private javax.swing.JLabel lTitle;
    private javax.swing.JButton bOK;
    private javax.swing.JLabel lFrom;
    // End of variables declaration//GEN-END:variables
    
}

class LogPointTableModel extends AbstractTableModel
{
	public static final ColumnData m_columns[] = {
		new ColumnData( "Time", 110, JLabel.LEFT ),
		new ColumnData( "Log Point Event", 350, JLabel.LEFT ),
		new ColumnData( "MsgType", 160, JLabel.LEFT ),
	};

	public static final int COL_TIME = 0;
	public static final int COL_LOGPOINT = 1;
	public static final int COL_TYPE = 2;

	public static final String[] CATEGORIES = {
            "Time", "Log Point Event", "MsgType"
        };

	protected MessageDetail m_parent;
	protected Vector m_vector;

	public LogPointTableModel(MessageDetail parent) {
		m_parent = parent;
		m_vector = new Vector();
	}

	public int getRowCount() {
		return m_vector==null ? 0 : m_vector.size();
	}

	public int getColumnCount() {
		return m_columns.length;
	}

	public String getColumnName(int nCol) {
		return m_columns[nCol].title;
	}

	public boolean isCellEditable(int nRow, int nCol) {
		return false;
	}

	public Object getValueAt(int nRow, int nCol) {
		if (nRow < 0 || nRow>=getRowCount())
			return "";
		LogPointEntry row = (LogPointEntry)m_vector.elementAt(nRow);
		switch (nCol) {
			case COL_TIME:
				return row.time();
			case COL_LOGPOINT:
				return "[" + row.getLogPointLevel()+ "]" + row.logPointName();
			case COL_TYPE:
				return row.msgtype();
		}
		return "???";
	}

	public LogPointEntry getValueAt(int nRow) {
		if (nRow < 0 || nRow>=getRowCount())
			return null;
		return (LogPointEntry)m_vector.elementAt(nRow);
	}
        
	public int addRow(LogPointEntry _lpe) {
            synchronized(m_vector) {
                m_vector.addElement(_lpe);
                return m_vector.size();
            }
	}

	public boolean delete(int nRow) {
		if (nRow < 0 || nRow >= m_vector.size())
			return false;
		m_vector.remove(nRow);
		return true;
	}

	public boolean deleteAll() {
            m_vector.removeAllElements();
            return true;
	}
        
}


/* This class renders the Log Point name in red if it is the final log point */
class LogPointCellRenderer extends javax.swing.table.DefaultTableCellRenderer {
    
    LogPointTableModel tableModel;
    
    public LogPointCellRenderer(LogPointTableModel _tableModel) {        
       super();   
       tableModel = _tableModel;
    }
    
    public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table,
                           Object value,
                           boolean isSelected,
                           boolean hasFocus,
                           int row,
                           int column)
    {
        
        LogPointEntry lpe = tableModel.getValueAt(row);
        
        //System.out.println("LogPointCellRenderer value = " + value);
        //If this is a receive log point & the "final" point, color it red.
        if (!lpe.isSend().booleanValue()) {
            
            if (lpe.logPointName().startsWith("Bef"))
                System.out.println("Log point name starts with Bef!!!: " + lpe.logPointName());
                            
            if (lpe.isFinalLogPoint()) {
                this.setForeground(java.awt.Color.red);
                this.setToolTipText("This is the Final Log Point");
            } else {
                this.setForeground(java.awt.Color.blue);
                this.setToolTipText("Receive-side message");
            }
        } else
            this.setForeground(java.awt.Color.black);

        setText((String)value);
        return this;
    }
    
    
}