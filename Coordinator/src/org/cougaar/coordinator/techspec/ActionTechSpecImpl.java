/*
 * ActionTechSpecImpl.java
 *
 * Created on April 5, 2004, 3:15 PM
 * <copyright>
 *  Copyright 2004 Object Services and Consulting, Inc.
 *  under sponsorship of the Defense Advanced Research Projects
 *  Agency (DARPA).
 *
 *  You can redistribute this software and/or modify it under the
 *  terms of the Cougaar Open Source License as published on the
 *  Cougaar Open Source Website (www.cougaar.org).
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * </copyright>
 */

package org.cougaar.coordinator.techspec;

import org.cougaar.coordinator.*;
import org.cougaar.core.util.UID;

import java.util.Set;
import java.util.HashSet;
import java.util.Vector;
import java.util.Iterator;

/**
 *
 * @author  Administrator
 */
public class ActionTechSpecImpl implements ActionTechSpecInterface   {

    String name;
    UID uid;
    AssetType assetType;
    AssetStateDimension assetDim;
    Vector actions;
    String revision = "0.1";
    int actionType;
    
    HashSet possibleValues = null;
    
    /** Creates a new instance of ActionTechSpecImpl */
    public ActionTechSpecImpl(String name, UID uid, AssetType type, AssetStateDimension assetDim, int actionType) {

        this.name = name;
        this.uid = uid;
        this.assetType = type;
        this.assetDim = assetDim;
        this.actionType = actionType;

        actions = new Vector();
        possibleValues = new HashSet();
    }
    
    /**
     * @return the name of this ActionTechSpec
     */
    public String getName() { return name; }

    /**
     * @return the uid of this ActionTechSpec
     */
    public UID getUID() { return uid; }
    
    /**
     * @return  the possible values that Actions generated by this Actuator can return via getValue()
     */
    public Set getPossibleValues() { return possibleValues; }
    
    /**
     * @return the asset type that the actuator cares about.
     */
    public AssetType getAssetType() { return assetType; }
    
    /**
     * @return the state dimension that the actuator affects if an action is taken.
     */
    public AssetStateDimension getStateDimension() { 
                
        return assetDim;
    }

    /**
     * Get the type of the action
     */
    public int getActionType() { return actionType; }
    
    /**
     * @return the ActionDescriptions for this Actuator
     */
    public Vector getActions() { return actions; }

    /**
     * Add an action
     */
    public void addAction(ActionDescription ad) { 
        actions.add(ad); 
        possibleValues.add( ad.name() );
    }

    
    /**
     * @return an action description for the specified actionValue taken
     * from the actionRecord.getValue(), which was generated initially from getValueFromXML(). 
     * The tech spec does not know what this conversion is since it didn't have a handle to an Action
     * at start up.
     */
    public ActionDescription getActionDescriptionForValue(Action a, Object actionValue) { 
        Iterator i = actions.iterator();
        while (i.hasNext()) {
            ActionDescription ad = (ActionDescription) i.next();
            Object adValue = a.getValueFromXML(ad.name()); //ad.name() returns the xml-based name
            if (adValue.equals(actionValue)) {
                return ad;
            }
        }
        return null;
    }
    
    /** @return a revision string for this TechSpec
     *
     */
    public void setRevision(String r) {
        this.revision = r;
    }

    /** @return a revision string for this TechSpec
     *
     */
    public String getRevision() {
        return revision;
    }
    
    /** @return a String that details info about this actuator, its actions and transition costs */
    public String toString() {
     
        String actionTypeStr = "UNKNOWN";
        if (actionType == this.APPLICATION_ACTIONTYPE) { actionTypeStr = "APPLICATION"; }
        else if (actionType == this.CORRECTIVE_ACTIONTYPE) { actionTypeStr = "CORRECTIVE"; }
        else if (actionType == this.PREVENTIVE_ACTIONTYPE) { actionTypeStr = "PREVENTIVE"; }
        else if (actionType == this.COMPENSATORY_ACTIONTYPE) { actionTypeStr = "COMPENSATORY"; }
        
        String s = "Actuator ["+this.getName()+"], uid="+this.getUID()+" ActionType="+actionTypeStr+"\n";
        s += "    Affects AssetType["+this.getAssetType()+"] and AssetStateDimension["+this.assetDim+"]\n";
        
        Iterator i = this.getActions().iterator();
        while (i.hasNext()) {
             ActionDescription ad = (ActionDescription)i.next();
             s = s+ "\n" + ad.toString() + "\n";
        }        
        return s;
    }
    
    
}
