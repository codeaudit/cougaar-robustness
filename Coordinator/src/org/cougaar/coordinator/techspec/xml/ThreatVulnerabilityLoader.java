/*
 * VulnerabilityLoader.java
 *
 * Created on March 29, 2004, 2:34 PM
 * <copyright>
 *  Copyright 2003 Object Services and Consulting, Inc.
 *  Copyright 2001-2003 Mobile Intelligence Corp
 *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA)
 *  and the Defense Logistics Agency (DLA).
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the Cougaar Open Source License as published by
 *  DARPA on the Cougaar Open Source Website (www.cougaar.org).
 *
 *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THE COUGAAR SOFTWARE.
 * </copyright>
 */

package org.cougaar.coordinator.techspec.xml;

import org.cougaar.coordinator.techspec.*;
import org.cougaar.util.ConfigFinder;

import org.cougaar.core.service.LoggingService;
import org.cougaar.util.log.Logging;
import org.cougaar.util.log.Logger;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Hashtable;

import org.w3c.dom.*;

/**
 * This class is used to parse VulnerableAsset elements
 *<p>
 *<p>
 *
 * @author  Administrator
 */
public class ThreatVulnerabilityLoader {

    private static Logger logger;
    
    static {        
        logger = Logging.getLogger(ThreatVulnerabilityLoader.class);
    }
    
    /**
     * Parses the VulnerableAssets element and returns a ThreatVulnerabilityFilter. Expects to 
     * find one AssetFilter, and zero or one EventLikelihood[Interval] element.
     */
    public static ThreatVulnerabilityFilter parseElement(Element element, Hashtable probabilityMap) {
       
        AssetFilter af = null;
        EventProbability ep = null;
        
        ThreatVulnerabilityFilter vf = null;
        
        Element e;
        for (Node child = element.getFirstChild(); child != null; child = child.getNextSibling()) {
            if (child.getNodeType() == Node.ELEMENT_NODE && child.getNodeName().equalsIgnoreCase("AssetFilter") ) {
                e = (Element)child;
                af = parseAssetFilter(e, probabilityMap);
            } else if (child.getNodeType() == Node.ELEMENT_NODE && child.getNodeName().equalsIgnoreCase("EventLikelihood") ) {
                e = (Element)child;
                ep = parseEventLikelihood(e, probabilityMap);
/*                
                try {
                    double prob = ep.computeIntervalProbability(System.currentTimeMillis(), System.currentTimeMillis()+6000000);
                    if (logger.isDebugEnabled()) { logger.debug("Testing event likelihood. Prob = "+prob); }            
                } catch (Exception e1) {
                    if (logger.isDebugEnabled()) { logger.debug("Testing event likelihood interval. EXCEPTION!"); }            
                }
 */               
                
            } else if (child.getNodeType() == Node.ELEMENT_NODE && child.getNodeName().equalsIgnoreCase("EventLikelihoodInterval") ) {
                e = (Element)child;
                ep = parseEventLikelihoodInterval(e, probabilityMap);
/*                
                try {
                    double prob = ep.computeIntervalProbability(System.currentTimeMillis(), System.currentTimeMillis()+6000000);
                    if (logger.isDebugEnabled()) { logger.debug("Testing event likelihood interval. Prob = "+prob); }            
                } catch (Exception e3) {
                    if (logger.isDebugEnabled()) { logger.debug("Testing event likelihood interval. EXCEPTION!"); }            
                }
*/                
            } //else, likely a text element - ignore
        }
        
        vf = new ThreatVulnerabilityFilter( af, ep );        
        return vf;
        
    }
    
    
//////////////////////////////////////////////////////////////////////////////////////////
    
// Asset Filter    
    
    
    /** Called with a DOM "Threat" element to process */
    protected static AssetFilter parseAssetFilter(Element element, Hashtable map) {
        
        AssetFilter af = new AssetFilter();        
        
        Element e;
        for (Node child = element.getFirstChild(); child != null; child = child.getNextSibling()) {
            if (child.getNodeType() == Node.ELEMENT_NODE && child.getNodeName().equalsIgnoreCase("Term") ) {
                e = (Element)child;                
                parseTerm(e, af);
            } else if (child.getNodeType() == Node.ELEMENT_NODE && child.getNodeName().equalsIgnoreCase("CorruptHostExists") ) {
                e = (Element)child;
                parseCorruptHost(e, af);
            } else if (child.getNodeType() == Node.ELEMENT_NODE && child.getNodeName().equalsIgnoreCase("CorruptHostExistsOnNetwork") ) {
                e = (Element)child;
                parseCorruptHostOnNetwork(e, af);
            } //else, likely a text element - ignore
        }

        return af;
        
    }

    
    /** Called with a DOM "Term" element to process */
    protected static void parseTerm(Element element, AssetFilter af) {    
    
        //Read the map value
        String name  = element.getAttribute("propName");
        String value = element.getAttribute("propValue");
        String op    = element.getAttribute("op");
        String type  = element.getAttribute("propType");

        af.addTerm(name, value, type, op);                
    }    
    
    /** Called with a DOM "CorruptHostExists" element to process */
    protected static void parseCorruptHost(Element element, AssetFilter af) {    
    
        String value = element.getAttribute("value");
        af.addCorruptHostTerm(value);                
    }    

    /** Called with a DOM "CorruptHostExistsOnNetwork" element to process */
    protected static void parseCorruptHostOnNetwork(Element element, AssetFilter af) {    
    
        String value = element.getAttribute("value");
        af.addCorruptHostOnNetworkTerm(value);                
    }    
    
    

//////////////////////////////////////////////////////////////////////////////////////////
    
// EventLikelihood -     
//    <EventLikelihood probability=“ALWAYS” />

 
    /** Called with a DOM "EventLikelihood" element to process */
    protected static EventProbability parseEventLikelihood(Element element, Hashtable map) {    
    
        EventProbability ep = null;
        String prob  = element.getAttribute("probability");
        String probInterval = element.getAttribute("probIntervalInMins"); //string
        
        if (prob == null || prob.length() == 0 || probInterval == null || probInterval.length() == 0) {

            logger.error("probability OR probIntervalInMins was missing or empty in ClockInterval element. Returning null EventProbabilityInterval.");
            return null;
        }

        //Map probability String to a float.
        float fProb = 0;
        if (map != null) {
            Float f = (Float) map.get(prob);
            if (f != null) {
                fProb = f.floatValue();
            } else {
                logger.warn("Could not find probability map entry for "+fProb+". Setting value to 0.");
            }
        }
         
        int probInt = 0;
        try {
            probInt = Integer.parseInt(probInterval);
        } catch (Exception e) {
            logger.error("ThreatVulnerabilityLoader -- exception parsing default probability interval: "+probInterval+", Ignoring.", e);
            return null;                
        }

        ep = new EventProbability();
        logger.debug("Creating static interval EventProbabilityInterval");            
        EventProbabilityInterval pi = new EventProbabilityInterval( fProb, probInt );
        ep.addInterval(pi);
        
        return ep;        
        
    }
    
  

//////////////////////////////////////////////////////////////////////////////////////////
    
// EventLikelihoodInterval -     
//        <EventLikelihoodInterval>
//            <ClockInterval intervalStart="1800" durationHrs="12" probability="MEDIUM" />
//            <ClockInterval intervalStart="1800" durationHrs="12" probability="LOW" />
//        </EventLikelihoodInterval>
    /** Called with a DOM "EventLikelihoodInterval" element to process */
    protected static EventProbability parseEventLikelihoodInterval(Element element, Hashtable map) {    
    
        EventProbability ep = null;
        
        ep = new EventProbability( );

        Element e;
        for (Node child = element.getFirstChild(); child != null; child = child.getNextSibling()) {
            if (child.getNodeType() == Node.ELEMENT_NODE && child.getNodeName().equalsIgnoreCase("ClockInterval") ) {
                e = (Element)child;                
                EventProbabilityInterval pi = parseInterval(e, map);
                if (pi != null) {
                    ep.addInterval(pi);
                }
            } //else, likely a text element - ignore
        }
        
        return ep;        
        
    }

    /** Called with a DOM "Term" element to process */
    protected static EventProbabilityInterval parseInterval(Element element, Hashtable map) {    
    
        logger.debug("Creating interval EventProbabilityInterval");            

        //Read the map value
        String start = element.getAttribute("intervalStart");
        String dur = element.getAttribute("durationHrs");
        String probStr    = element.getAttribute("probability");
        String probInterval = element.getAttribute("probIntervalInMins"); //string

        if (start== null || start.length()==0 || dur == null || dur.length() == 0 || probStr == null || probStr.length() == 0 || probInterval == null || probInterval.length() == 0) {

            logger.error("intervalStart, durationHrs, probability OR probIntervalInMins was missing or empty in ClockInterval element. Returning null EventProbabilityInterval.");
            return null;
        }
        
        
       //Map probability String to a float.
        float fProb = 0;
        if (map != null) {
            Float f = (Float) map.get(probStr);
            if (f != null) {
                fProb = f.floatValue();
            } else {
                logger.warn("Could not find probability map entry for "+probStr+". Setting value to 0.");
            }
        }

        int probInt = 0;
        try {
            probInt = Integer.parseInt(probInterval);
        } catch (Exception e) {
            logger.error("ThreatVulnerabilityLoader -- exception parsing default probability interval: "+probInterval+", Ignoring.", e);
            return null;                
        }
        
        int startHrs = 0;
        int durHrs = 0;
        int startMin = 0;
        
        
        try {
            
            if (start.length() <= 2) {
                startHrs = 0;
                startMin = Integer.parseInt(start);
            } else
            if (start.length() == 3) {
                startHrs = Integer.parseInt(start.substring(0,1) );
                startMin = Integer.parseInt(start.substring(1,3) );
            } else
            if (start.length() == 4) {
                startHrs = Integer.parseInt(start.substring(0,2) );
                startMin = Integer.parseInt(start.substring(2,4) );
            } else {
                logger.error("intervalStart too large ["+start+"]in ClockInterval element. Must be between 0000-2359. Returning null EventProbabilityInterval.");            
                return null;
            }
            if (startHrs > 23 ) {
                logger.error("intervalStart hrs too large ["+start+"]in ClockInterval element. Must be between 0-23. Returning null EventProbabilityInterval.");            
                return null;
            }
            if (startMin > 59) {
                logger.error("intervalStart min too large ["+start+"]in ClockInterval element. Must be between 0-59. Returning null EventProbabilityInterval.");            
                return null;
            }

            
            durHrs = Integer.parseInt(dur);
            
        } catch (Exception e) {
            logger.error("Parsing error. Integer conversion error for intervalStart["+start+"] or durationHrs["+dur+"]");            
            return null;
        }

        logger.debug("Read in start time = "+start+", starthr="+startHrs+", startMin="+startMin);            
        

        EventProbabilityInterval pi = new EventProbabilityInterval( startHrs, startMin, durHrs, fProb, probInt );
        return pi;
        
    }    
    
    
}


