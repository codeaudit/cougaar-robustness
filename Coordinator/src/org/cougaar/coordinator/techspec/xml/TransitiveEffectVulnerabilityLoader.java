/*
 * TransitiveEffectVulnerabilityLoader.java
 *
 * Created on May 7, 2004, 12:26 PM
 * 
 * <copyright>
 * 
 *  Copyright 2004 Object Services and Consulting, Inc.
 *  under sponsorship of the Defense Advanced Research Projects
 *  Agency (DARPA).
 *
 *  You can redistribute this software and/or modify it under the
 *  terms of the Cougaar Open Source License as published on the
 *  Cougaar Open Source Website (www.cougaar.org).
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * </copyright>
 */

package org.cougaar.coordinator.techspec.xml;

import org.cougaar.coordinator.techspec.*;
import org.cougaar.util.ConfigFinder;

import org.cougaar.core.service.LoggingService;
import org.cougaar.util.log.Logging;
import org.cougaar.util.log.Logger;

import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Hashtable;

import org.w3c.dom.*;

/**
 * This class is used to parse VulnerableAsset elements
 *<p>
 *<p>
 *
 * @author  Administrator
 */
public class TransitiveEffectVulnerabilityLoader {

    private static Logger logger;
    
    static {        
        logger = Logging.getLogger(TransitiveEffectVulnerabilityLoader.class.toString());        
    }
    
    /**
     * Parses the VulnerableAssets element and returns a TransitiveEffectVulnerabilityFilter. Expects to 
     * find EITHER one AssetFilter or one ContainmentFilter, and zero or one EventLikelihood[Interval] element.
     */
    public static TransitiveEffectVulnerabilityFilter parseElement(Element element, Hashtable probabilityMap, EventDescription event) {
        ContainmentFilter cf = null;
        //EventProbability ep = null;
        float prob = 0;
        
        TransitiveEffectVulnerabilityFilter vf = null;
        
        Element e;
        for (Node child = element.getFirstChild(); child != null; child = child.getNextSibling()) {
            if (child.getNodeType() == Node.ELEMENT_NODE && child.getNodeName().equalsIgnoreCase("ContainmentFilter") ) {
                e = (Element)child;
                String container = e.getAttribute("eventAssetContainerName");
                if (container == null) {
                    logger.error("ContainmentFilter XML definition error - no eventAssetContainerName attr for TransitiveEffect in Event="+event.getName() );
                }
                cf = new ContainmentFilter(container);
            } else if (child.getNodeType() == Node.ELEMENT_NODE && child.getNodeName().equalsIgnoreCase("EventLikelihood") ) {
                e = (Element)child;
                prob = parseEventLikelihood(e, probabilityMap);
            } //else, likely a text element - ignore
        }
        
        vf = new TransitiveEffectVulnerabilityFilter( cf, prob );
        
        return vf;
        
    }
    
    
//////////////////////////////////////////////////////////////////////////////////////////
    
    
// EventLikelihood -     
//    <EventLikelihood probability=“ALWAYS” />

 
    /** Called with a DOM "EventLikelihood" element to process */
    protected static float parseEventLikelihood(Element element, Hashtable map) {    
    
        EventProbability ep = null;
        String prob  = element.getAttribute("probability");
        
       //Map probability String to a float.
        float fProb = 0;
        if (map != null) {
            Float f = (Float) map.get(prob);
            if (f != null) {
                fProb = f.floatValue();
            }
        }

        return fProb;
        
        //ep = new EventProbability();
        //EventProbabilityInterval pi = new EventProbabilityInterval( fProb );
        //ep.addInterval(pi);
        //return ep;        
        
    }
    
  

//////////////////////////////////////////////////////////////////////////////////////////
    
    
    
}


