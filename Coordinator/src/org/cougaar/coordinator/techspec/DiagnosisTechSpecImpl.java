/*
 * DiagnosisTechSpecImpl.java
 *
 * Created on March 4, 2004, 2:25 PM
 * 
 * <copyright>
 * 
 *  Copyright 2003-2004 Object Services and Consulting, Inc.
 *  under sponsorship of the Defense Advanced Research Projects
 *  Agency (DARPA).
 *
 *  You can redistribute this software and/or modify it under the
 *  terms of the Cougaar Open Source License as published on the
 *  Cougaar Open Source Website (www.cougaar.org).
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * </copyright>
 */

package org.cougaar.coordinator.techspec;

import org.cougaar.coordinator.*;  
import org.cougaar.core.util.UID;

import java.util.Set;
import java.util.HashSet;
import java.util.Vector;
import java.util.Iterator;

/**
 *
 * @author  Administrator
 */
public class DiagnosisTechSpecImpl implements DiagnosisTechSpecInterface  {
    
    HashSet pvs;
    Vector levels;
    String name;
    Vector threatTypes;
    UID uid;
    String revision = "0";
    Vector probabilities = null;
    Vector crossProbabilities;
    AssetType assetType;
    AssetStateDimension stateDim;
    int latency;
    String defaultValue = null;
    int reportingPolicy = -1;
    
    /** Creates a new instance of DiagnosisTechSpecImpl */
    public DiagnosisTechSpecImpl(String name, UID uid, AssetType type, AssetStateDimension stateDim, int latency, String reportingPolicy) {

        this.name = name;
        this.levels = new Vector();        
        this.pvs = new HashSet();
        this.threatTypes = new Vector();
        this.uid = uid;
        this.probabilities = new Vector();
        this.crossProbabilities = new Vector();
        this.assetType = type;
        this.stateDim = stateDim;
        this.latency = latency;
        if (reportingPolicy.equals("SNAPSHOT")) {
            this.reportingPolicy = DiagnosisTechSpecInterface.SNAPSHOT;
        } else if (reportingPolicy.equals("ALWAYS_CURRENT")) {
            this.reportingPolicy = DiagnosisTechSpecInterface.ALWAYS_CURRENT;
        } else {
            ;//error -- should NOT occur!
        }
            
    }
    
    /** @return the asset type that the sensor is watching.
     */
    public AssetType getAssetType() {
        return assetType;
    }

    /** @return the State Dimension that the sensor is watching.
     */
    public AssetStateDimension getStateDimension() {
        return stateDim;
    }

    /** @return the latency -- the time it takes this sensor to diagnose/notice & report a problem, in milliseconds.
     */
    public int getLatency() {
        return latency;
    }

    /** @return the reportingPolicy -- either SNAPSHOT | ALWAYS_CURRENT
     */
    public int getReportingPolicy() {
        return reportingPolicy;
    }
    
    /** @return the vector of monitoring levels that this sensor supports
     *
     */
    public Vector getMonitoringLevels() {
        return levels;
    }
    
    /** @return a user-readable name for this TechSpec
     *
     */
    public String getName() {
        return name;
    }
    
    /** @return the possible values that Diagnoses generated by this Sensor can return via getValue()
     */
    public Set getPossibleValues() {
        return pvs;
    }
    
    /** @return a revision string for this TechSpec
     *
     */
    public String getRevision() {
        return "0.1";
    }
    
    /** @return the ThreatTypes associated with this Defense
     */
    public Vector getThreatTypes() {
        return threatTypes;
    }
    
    /** @return a unique cougaar level name for this TechSpec
     *
     */
    public UID getUID() {
        return uid;
    }

    
    
    /** @return the vector of monitoring levels that this sensor supports
     *
     */
//    public void addMonitoringLevel() {
//        levels.add(null);
//    }
    
    /** Add a possible value that Diagnoses generated by this Sensor can return via getValue()
     */
    public void addPossibleValue(String v) {
        pvs.add(v);
    }

    
    /** Set the default value that Diagnoses generated by this Sensor should default to when initialized     
     */
    public void setDefaultValue(String v) {
        defaultValue = v;
    }

    /** @return the default value that Diagnoses generated by this Sensor should default to when initialized     
     */
    public String getDefaultValue() {
        return defaultValue;
    }
    
    /** @return a revision string for this TechSpec
     *
     */
    public void setRevision(String r) {
        this.revision = r;
    }
    
    /** @return the ThreatTypes associated with this Defense
     */
//    public void addThreatType() {
//        threatTypes.add(null);
//    }
    
    /**
     * @return the DiagnosisProbabilities
     *
     */
    public Vector getDiagnosisProbabilities() {
        return probabilities;
    }

    
    
    /**
     * Add a DiagnosisProbability
     *
     */
    public void addDiagnosisProbability(DiagnosisProbability dp) {
        probabilities.add(dp);
    }
    
    
    public String toString() {
     
        String policy = (this.reportingPolicy == DiagnosisTechSpecInterface.ALWAYS_CURRENT) ? "ALWAYS_CURRENT" : "SNAPSHOT";
        String s = "Sensor ["+this.getName()+"], uid="+this.getUID()+",  default value= "+ this.defaultValue+",reportingPolicy="+policy+"\n";
        Iterator i = this.getDiagnosisProbabilities().iterator();
        while (i.hasNext()) {
             DiagnosisProbability dp = (DiagnosisProbability)i.next();
             s = s+ "    When Actual State Is = " + dp.getActualState() + "\n";
             Iterator probs = dp.getProbabilities().iterator();
             while (probs.hasNext()) {
                 DiagnosisProbability.DiagnoseAs da = (DiagnosisProbability.DiagnoseAs)probs.next();
                 s = s + "       Will Diagnose As " + da.getDiagnosisValue() + " with prob="+ da.getProbability() + "\n";
             }             
        }        
        return s;
    }
    
    /** @return the CrossDiagnosisProbabilities
     *
     */
    public Vector getCrossDiagnosisProbabilities() {
        return crossProbabilities;
    }
    
    /** add a CrossDiagnosisProbability
     *
     */
    public void addCrossDiagnosisProbability(CrossDiagnosis cd) {
        crossProbabilities.add(cd);
    }
    
}
