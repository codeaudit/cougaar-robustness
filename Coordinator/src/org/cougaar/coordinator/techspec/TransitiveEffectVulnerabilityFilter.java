/*
 * TransitiveEffectVulnerabilityFilter.java
 *
 * Created on March 26, 2004, 3:14 PM
 * <copyright>
 *  Copyright 2003 Object Services and Consulting, Inc.
 *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA)
 *  and the Defense Logistics Agency (DLA).
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the Cougaar Open Source License as published by
 *  DARPA on the Cougaar Open Source Website (www.cougaar.org).
 * 
 *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THE COUGAAR SOFTWARE.
 * </copyright>
 */

package org.cougaar.coordinator.techspec;

import java.util.Vector;
import java.util.Iterator;

import org.cougaar.util.log.Logging;
import org.cougaar.util.log.Logger;
import org.cougaar.core.persist.NotPersistable;


/**
 * This class describes a transitive effect vulnerability filter for an event
 * @author  Administrator
 */
public class TransitiveEffectVulnerabilityFilter implements NotPersistable {
    
    ContainmentFilter containmentFilter = null;
    //EventProbability ep;
    float prob;
    
    /** Creates a new instance of TransitiveEffectVulnerabilityFilter */
    public TransitiveEffectVulnerabilityFilter(ContainmentFilter cf, float prob) {
        containmentFilter = cf;
        this.prob = prob;
    }
    
    /**
     * @return the event probability
     */
    public float getProbability() { return prob; }
    
    
    /**
     * @return the containment filter, if one.
     */
    protected ContainmentFilter getContainmentFilter() {
        return containmentFilter;
    }
    
    public String toString() {
        String s = "        Vulnerability Filter -- ";
        return s+containmentFilter.toString() + "\n      Probability = " + prob;
    }
    
    /**
     * @return true if an asset qualifies -- if the threat's filters don't exclude the asset
     */
    protected boolean qualifies(TransitiveEffectModelManagerPlugin mgr, AssetTechSpecInterface asset) {

        if (containmentFilter != null) {
            return containmentFilter.qualifies(mgr, asset);
        } else { //no filter so it qualifies            
            return true;
        }
    }

}

/*
 <VulnerableAssets>
    <ContainmentFilter eventAssetContainerName="Node" />
    <EventLikelihoodInterval>
        <ClockInterval intervalStart="1800" durationHrs="12" probability="VERY_LOW" />
    </EventLikelihoodInterval>
</VulnerableAssets>

<VulnerableAssets>
    <ContainmentFilter eventAssetContainerName="Node" />
    <EventLikelihoodInterval>
        <ClockInterval intervalStart="1800" durationHrs="12" probability="MEDIUM" />
        <ClockInterval intervalStart="1800" durationHrs="12" probability="LOW" />
    </EventLikelihoodInterval>
</VulnerableAssets>

</Threat>

 

    
 Containment Filter    
    
    * * Called with a DOM "ContainmentFilter" element to process *
    protected static ContainmentFilter parseContainmentFilter(Element element) {    
    
        //Read the map value
        String container  = element.getAttribute("eventAssetContainerName");

        ContainmentFilter cf = new ContainmentFilter( container );
        return cf;
    }    

 
*/