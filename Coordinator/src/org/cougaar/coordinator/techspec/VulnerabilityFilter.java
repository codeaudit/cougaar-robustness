/*
 * VulnerabilityFilter.java
 *
 * Created on March 26, 2004, 3:14 PM
 * 
 * <copyright>
 * 
 *  Copyright 2004 Object Services and Consulting, Inc.
 *  under sponsorship of the Defense Advanced Research Projects
 *  Agency (DARPA).
 *
 *  You can redistribute this software and/or modify it under the
 *  terms of the Cougaar Open Source License as published on the
 *  Cougaar Open Source Website (www.cougaar.org).
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * </copyright>
 */

package org.cougaar.coordinator.techspec;

import java.util.Vector;
import java.util.Iterator;

import org.cougaar.util.log.Logging;
import org.cougaar.util.log.Logger;
import org.cougaar.core.persist.NotPersistable;


/**
 *
 * @author  Administrator
 */
public class VulnerabilityFilter implements NotPersistable {
    
    AssetFilter assetFilter = null;
    ContainmentFilter containmentFilter = null;
    EventProbability ep;
    
    /** Creates a new instance of VulnerabilityFilter, with a */
    public VulnerabilityFilter(AssetFilter af, EventProbability ep) {
        assetFilter = af;
        this.ep = ep;
    }

    /** Creates a new instance of VulnerabilityFilter */
    public VulnerabilityFilter(ContainmentFilter cf, EventProbability ep) {
        containmentFilter = cf;
        this.ep = ep;
    }
    
    /**
     * @return the event probability
     */
    public EventProbability getProbability() { return ep; }
    
    /**
     * @return the asset filter, if one.
     */
    public AssetFilter getAssetFilter() {
        return assetFilter;
    }
    
    /**
     * @return the containment filter, if one.
     */
    public ContainmentFilter getContainmentFilter() {
        return containmentFilter;
    }
    
    public String toString() {
        String s = "    Vulnerability Filter -- ";
        return (assetFilter != null) ? s+assetFilter.toString() + "\n      " + ep : s+containmentFilter.toString() + "\n      " + ep;
    }
    
    
}

/*
 <VulnerableAssets>
    <AssetFilter>
        <Term propName="location" propValue="HiWay" op="=" />
    </AssetFilter >
    <EventLikelihoodInterval>
        <ClockInterval intervalStart="1800" durationHrs="12" probability="VERY_LOW" />
    </EventLikelihoodInterval>
</VulnerableAssets>

<VulnerableAssets>
    <AssetFilter>
        <Term propName="location" propValue="OffRoad" op="=" />
    </AssetFilter>
    <EventLikelihoodInterval>
        <ClockInterval intervalStart="1800" durationHrs="12" probability="MEDIUM" />
        <ClockInterval intervalStart="1800" durationHrs="12" probability="LOW" />
    </EventLikelihoodInterval>
</VulnerableAssets>

</Threat>

Some variations:
 
<AssetFilter>
    <CorruptHostExistsOnNetwork value="TRUE" />    
</AssetFilter >
 
<AssetFilter>
    <CorruptHostExists value="TRUE" />    
</AssetFilter >
 
 
<VulnerableAssets>
    <ContainmentFilter eventAssetContainerName=”Node” >
    <EventLikelihood probability=“ALWAYS” />
</VulnerableAssets>
*/