/*
 * VulnerabilityFilter.java
 *
 * Created on March 26, 2004, 3:14 PM
 * <copyright>
 *  Copyright 2003 Object Services and Consulting, Inc.
 *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA)
 *  and the Defense Logistics Agency (DLA).
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the Cougaar Open Source License as published by
 *  DARPA on the Cougaar Open Source Website (www.cougaar.org).
 * 
 *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THE COUGAAR SOFTWARE.
 * </copyright>
 */

package org.cougaar.coordinator.techspec;

import java.util.Vector;
import java.util.Iterator;

import org.cougaar.util.log.Logging;
import org.cougaar.util.log.Logger;
import org.cougaar.core.persist.NotPersistable;


/**
 *
 * @author  Administrator
 */
public class VulnerabilityFilter implements NotPersistable {
    
    AssetFilter assetFilter = null;
    ContainmentFilter containmentFilter = null;
    EventProbability ep;
    
    /** Creates a new instance of VulnerabilityFilter, with a */
    public VulnerabilityFilter(AssetFilter af, EventProbability ep) {
        assetFilter = af;
        this.ep = ep;
    }

    /** Creates a new instance of VulnerabilityFilter */
    public VulnerabilityFilter(ContainmentFilter cf, EventProbability ep) {
        containmentFilter = cf;
        this.ep = ep;
    }
    
    /**
     * @return the event probability
     */
    public EventProbability getProbability() { return ep; }
    
    /**
     * @return the asset filter, if one.
     */
    public AssetFilter getAssetFilter() {
        return assetFilter;
    }
    
    /**
     * @return the containment filter, if one.
     */
    public ContainmentFilter getContainmentFilter() {
        return containmentFilter;
    }
    
    
}
/*
 <VulnerableAssets>
    <AssetFilter>
        <Term propName="location" propValue="HiWay" op="=" />
    </AssetFilter >
    <EventLikelihoodInterval>
        <ClockInterval intervalStart="1800" durationHrs="12" probability="VERY_LOW" />
    </EventLikelihoodInterval>
</VulnerableAssets>

<VulnerableAssets>
    <AssetFilter>
        <Term propName="location" propValue="OffRoad" op="=" />
    </AssetFilter>
    <EventLikelihoodInterval>
        <ClockInterval intervalStart="1800" durationHrs="12" probability="MEDIUM" />
        <ClockInterval intervalStart="1800" durationHrs="12" probability="LOW" />
    </EventLikelihoodInterval>
</VulnerableAssets>

</Threat>

Some variations:
 
<AssetFilter>
    <CorruptHostExistsOnNetwork value="TRUE" />    
</AssetFilter >
 
<AssetFilter>
    <CorruptHostExists value="TRUE" />    
</AssetFilter >
 
 
<VulnerableAssets>
    <ContainmentFilter eventAssetContainerName=”Node” >
    <EventLikelihood probability=“ALWAYS” />
</VulnerableAssets>
*/