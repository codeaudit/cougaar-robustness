/*
 * File:           AssetStateXMLParser.java
 * Date:           September 17, 2003  4:37 PM
 *
 * <copyright>
 *  Copyright 2003 Object Services and Consulting, Inc.
 *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA)
 *  and the Defense Logistics Agency (DLA).
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the Cougaar Open Source License as published by
 *  DARPA on the Cougaar Open Source Website (www.cougaar.org).
 * 
 *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THE COUGAAR SOFTWARE.
 * </copyright>
 * @author  Administrator
 * @version generated by NetBeans XML module
 */
package org.cougaar.coordinator.techspec;

import org.cougaar.util.log.Logger;
import org.cougaar.util.log.Logging;

import org.xml.sax.*;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import java.io.File;
import java.io.FileInputStream;
import java.util.Vector;

import org.cougaar.util.ConfigFinder; //steve

/**
 * The class reads XML documents according to specified DTD and
 * translates all related events into ThreatModelXML_DTDHandlerInterface events.
 * <p>Usage sample:
 * <pre>
 *    AssetStateXMLParser parser = new AssetStateXMLParser(...);
 *    parser.parse(new InputSource("..."));
 * </pre>
 */
public class AssetStateXMLParser implements ContentHandler {
    
    private java.lang.StringBuffer buffer;
       
    private java.util.Stack context;
    
    private EntityResolver resolver;
    
    Vector newAssetStateDescriptors;
    
    private Logger logger;
    
    public Vector getParsedDescriptors() { return newAssetStateDescriptors; }
    
    /**
     * Creates a parser instance.
     */
    public AssetStateXMLParser() { //, final EntityResolver resolver) { //, final ThreatModelXML_DTDParsletInterface parslet) {
        //this.parslet = parslet;
        this.resolver = new MyResolver();
        buffer = new StringBuffer(111);
        context = new java.util.Stack();
        
        newAssetStateDescriptors = new Vector();
        logger = Logging.getLogger(this.getClass().getName());
        
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void setDocumentLocator(Locator locator) {
        //handler.setDocumentLocator(locator);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void startDocument() throws SAXException {
        //handler.startDocument();
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void endDocument() throws SAXException {
        //handler.endDocument();
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void startElement(java.lang.String ns, java.lang.String name, java.lang.String qname, Attributes attrs) throws SAXException {
        
        try {
        dispatch(true);
        context.push(new Object[] {qname, new org.xml.sax.helpers.AttributesImpl(attrs)});
        if ("AssetStateDescriptors".equalsIgnoreCase(qname)) {
            start_AssetStateDescriptors(attrs);
        } else if ("AssetStates".equalsIgnoreCase(qname)) {
            start_AssetStates(attrs);
        } else if ("StateValues".equalsIgnoreCase(qname)) {
            start_StateValues(attrs);
        } else if ("StateValue".equalsIgnoreCase(qname)) {
            handle_StateValue(attrs);
        } else if ("Transitions".equalsIgnoreCase(qname)) {
            start_Transitions(attrs);
        } else if ("Transition".equalsIgnoreCase(qname)) {
            handle_Transition(attrs);
        } 
        
        } catch (Exception e) {
            System.out.println("***Exception parsing*** --> "+e);
            e.printStackTrace();
        }
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void endElement(java.lang.String ns, java.lang.String name, java.lang.String qname) throws SAXException {
        try {
        dispatch(false);
        context.pop();
        if ("AssetStateDescriptors".equalsIgnoreCase(qname)) {
            end_AssetStateDescriptors();
        } else if ("AssetStates".equals(qname)) {
            end_AssetStates();
        } else if ("StateValues".equalsIgnoreCase(qname)) {
            end_StateValues();
        } else if ("Transitions".equalsIgnoreCase(qname)) {
            end_Transitions();
        }
        //endElement(ns, name, qname);
        } catch (Exception e) {
            System.out.println("***Exception parsing*** --> "+e);
            e.printStackTrace();
        }
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void characters(char[] chars, int start, int len) throws SAXException {
        buffer.append(chars, start, len);
        //handler.characters(chars, start, len);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void ignorableWhitespace(char[] chars, int start, int len) throws SAXException {
        //handler.ignorableWhitespace(chars, start, len);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void processingInstruction(java.lang.String target, java.lang.String data) throws SAXException {
        //handler.processingInstruction(target, data);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void startPrefixMapping(final java.lang.String prefix, final java.lang.String uri) throws SAXException {
        //handler.startPrefixMapping(prefix, uri);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void endPrefixMapping(final java.lang.String prefix) throws SAXException {
        //handler.endPrefixMapping(prefix);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     */
    public final void skippedEntity(java.lang.String name) throws SAXException {
        //handler.skippedEntity(name);
    }
    
    private void dispatch(final boolean fireOnlyIfMixed) throws SAXException {
        if (fireOnlyIfMixed && buffer.length() == 0) return; //skip it
        
        Object[] ctx = (Object[]) context.peek();
        String here = (String) ctx[0];
        Attributes attrs = (Attributes) ctx[1];
        buffer.delete(0, buffer.length());
    }
    
    /**
     * The recognizer entry method taking an InputSource.
     * @param input InputSource to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     */
    public void parse(final InputSource input) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        parse(input, this);
    }
    
    /**
     * The recognizer entry method taking a URL.
     * @param url URL source to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     */
    public void parse(final java.net.URL url) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        parse(new InputSource(url.toExternalForm()), this);
    }
    
    
    private static void parse(final InputSource input, final AssetStateXMLParser recognizer) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        javax.xml.parsers.SAXParserFactory factory = javax.xml.parsers.SAXParserFactory.newInstance();
        factory.setValidating(true);  //the code was generated according DTD
        factory.setNamespaceAware(false);  //the code was generated according DTD
        XMLReader parser = factory.newSAXParser().getXMLReader();
        parser.setContentHandler(recognizer);
        parser.setErrorHandler(recognizer.getDefaultErrorHandler());
        if (recognizer.resolver != null) parser.setEntityResolver(recognizer.resolver);
        parser.parse(input);
    }
    
    
    /**
     * Creates default error handler used by this parser.
     * @return org.xml.sax.ErrorHandler implementation
     */
    protected ErrorHandler getDefaultErrorHandler() {
        return new ErrorHandler() {
            public void error(SAXParseException ex) throws SAXException  {
                if (context.isEmpty()) System.err.println("Missing DOCTYPE.");
                throw ex;
            }
            
            public void fatalError(SAXParseException ex) throws SAXException {
                throw ex;
            }
            
            public void warning(SAXParseException ex) throws SAXException {
                // ignore
            }
        };
        
    }


    private AssetStateDescriptor currentDescriptor;
    private boolean ERROR = false;

    
    /** Called when the start of the AssetStateDescriptors element is seen */
    private void start_AssetStateDescriptors(Attributes attrs){ 
    }

        
    /** Called when the start of the AssetStates element is seen */
    private void start_AssetStates(Attributes attrs){ 

        ERROR = false; //reset, start of new descriptor

        String type = attrs.getValue("assetType");
        String name = attrs.getValue("stateName");        
        AssetType assetType = AssetType.findAssetType(type);
        
        if (type != null && name != null && assetType != null) {
            currentDescriptor = new AssetStateDescriptor(assetType, name);
        } else {
            ERROR = true;
            logger.warn("*** Cannot process -- AssetDescriptors XML -  state value attrs null or assetType unknown: stateName=" + name + " assetType=" + type);            
        }
    
    }
    
    /** Called when the start of the StateValues element is seen */
    private void start_StateValues(Attributes attrs){ }
    
    /** Called when the StateValue element is seen */
    private void handle_StateValue(Attributes attrs){ 
    
        if (ERROR) { return; }

        String name = attrs.getValue("name");
        String utility = attrs.getValue("utility");        
        String defaultBool = attrs.getValue("default");        

        int util = 0;
        try {
            util = Integer.parseInt(utility);
        } catch (Exception e) {
            ERROR = true;
            logger.warn("*** Cannot process -- AssetDescriptors XML contains invalid integer value for utility: "+utility+" -- Exception was " + e);            
        }
        
        if (name != null && utility != null) {
            StateValue sv = new StateValue(name, util);
            currentDescriptor.addValue(sv);    

            //If identified as the default, make it so.
            if (defaultBool != null && defaultBool.equalsIgnoreCase("TRUE")) {
                currentDescriptor.setDefaultValue(sv);
            }
        } else {
            ERROR = true;
            logger.warn("*** Cannot process -- AssetDescriptors XML - state value names null: name=" + name + " , utility=" + utility);            
        }
        
    }
    
    /** Called when the start of the Transitions element is seen */
    private void start_Transitions(Attributes attrs){ }
    
    /** Called when the Transition element is seen */
    private void handle_Transition(Attributes attrs){ 
    
        if (ERROR) { return; }

        String start = attrs.getValue("startStateName");
        String end = attrs.getValue("endStateName");        
    
        StateValue startS = currentDescriptor.findStateValue(start);
        StateValue endS = currentDescriptor.findStateValue(end);
        
        if (startS != null && endS != null) {
            currentDescriptor.addTransition(new AssetTransition(startS, endS));
        } else {
            ERROR = true;
            logger.warn("*** Cannot process -- AssetDescriptors XML - transition state value names not found: " + start + " or " + end);            
        }
    }
    
    

    /** Called when the end of the end_AssetStateDescriptors element is seen */
    private void end_AssetStateDescriptors(){}
    


    /** Called when the end of the AssetStates element is seen */
    private void end_AssetStates(){
    
        if (!ERROR) { //add the currentDescriptor
            newAssetStateDescriptors.addElement(currentDescriptor);
        }
    }
    
    /** Called when the end of the StateValues element is seen */
    private void end_StateValues(){ }
    
    /** Called when the end of the Transitions element is seen */
    private void end_Transitions(){ }
    
    
    
    

    /**
     * Used to find local dtd file. Strips off "file://" from the SystemID name
     * supplying the DTD file name.
     *
     */
     public class MyResolver implements EntityResolver {
       public InputSource resolveEntity (String publicId, String systemId)
       {
          System.out.println("SystemID = "+systemId);
          System.out.println("publicID = "+publicId);
          
//steve   String fn = systemId.substring(7); //strip off "file://"
	  int i = systemId.lastIndexOf('/'); //steve
          String fn = systemId.substring(i+1); //steve
          try {
//steve       return new InputSource(new FileInputStream(new File(fn)));
              return new InputSource(new FileInputStream(new ConfigFinder().locateFile(fn))); //steve
          } catch (Exception e) {
              System.out.println("DTD Exception: "+e);
              return null;
          }
       }
     }
    
}

