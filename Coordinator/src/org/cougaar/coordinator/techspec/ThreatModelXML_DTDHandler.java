/*
 * File:           ThreatModelXML_DTDHandler.java
 * Date:           September 17, 2003  4:37 PM
 *
 * <copyright>
 *  Copyright 2003 Object Services and Consulting, Inc.
 *  under sponsorship of the Defense Advanced Research Projects Agency (DARPA)
 *  and the Defense Logistics Agency (DLA).
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the Cougaar Open Source License as published by
 *  DARPA on the Cougaar Open Source Website (www.cougaar.org).
 * 
 *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
 *  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 *  PERFORMANCE OF THE COUGAAR SOFTWARE.
 * </copyright>
 * @author  Administrator
 * @version generated by NetBeans XML module
 */
package org.cougaar.coordinator.techspec;

import org.xml.sax.*;
import org.cougaar.util.log.Logger;
import org.cougaar.util.log.Logging;
import java.util.Vector;

public class ThreatModelXML_DTDHandler implements ThreatModelXML_DTDHandlerInterface {

    private Vector models;
    
    private boolean ERROR = false;
    
    public static final boolean DEBUG = false;
    private Logger logger;
    
    private MetaThreatModel threatModel;
    private AssetType assetType = null;
    private AssetStateDimension assetStateName;
    
    public Vector getModels() { return models; }
    
    public ThreatModelXML_DTDHandler() {
        logger = Logging.getLogger(this.getClass().getName());
    }
    
        
    public void start_ThreatModels(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_ThreatModels: " + meta);

        //Create storage for each threat model
        models = new Vector();
    }
    
    public void end_ThreatModels() throws SAXException {
        if (DEBUG) System.err.println("end_ThreatModels()");
        //do nothing
    }

    public void start_MemberFilters(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_MemberFilters: " + meta);
        //do nothing
    }
    
    public void end_MemberFilters() throws SAXException {
        if (DEBUG) System.err.println("end_MemberFilters()");
        //do nothing
    }
    
    public void start_ThreatModelDef(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_ThreatModelDef: " + meta);
        threatModel = new MetaThreatModel();
        
        String type = meta.getValue("assetType");
        assetType = AssetType.findAssetType(type);
        if (assetType == null) {
           ERROR= true;
           logger.warn("*** Cannot process -- ThreatModel XML [start_ThreatModelDef()] contains invalid assetType: " + type);
           return;
        }
        String threat = meta.getValue("name");
        String threatType = meta.getValue("threatType");

        if (threat == null) {
           ERROR= true;
           logger.warn("*** Cannot process -- ThreatModel XML [start_ThreatModelDef()] contains null threat" );
           return;
        }

        if (threatType == null) {
           ERROR= true;
           logger.warn("*** Cannot process -- ThreatModel XML [start_ThreatModelDef()] contains null threatType" );
           return;
        }
        
        
        //** FILL IN VALUES ***
        threatModel.setAssetType(assetType);
        threatModel.setThreatName(threat);
        threatModel.setThreatType(threatType);
    }
    
    public void end_ThreatModelDef() throws SAXException {
        if (DEBUG) System.err.println("end_ThreatModelDef()");
        
        if (!ERROR) {
            //public MetaThreatModel(String name, ThreatType threatType, DamageDistribution[] distribution, ThreatMembershipFilter[] filters, AssetType assetType, ThreatLikelihoodInterval[] threatLikelihoods) {
            models.addElement(threatModel);
        } 
        resetValues();
    }
    
    public void handle_ApplicabilityInterval(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_ApplicabilityInterval: " + meta);

        try {
            if (!ERROR) {
                String period = meta.getValue("period");
                String interval = meta.getValue("intervalLength");
                String prob = meta.getValue("probability");

                if (period != null && interval != null && prob != null) {
                    int intervalLen = Integer.parseInt(interval);
                    double probability = Double.parseDouble(prob);

                    ThreatLikelihoodInterval.ApplicabilityInterval appInt = ThreatLikelihoodInterval.getApplicabilityIntervalByName(period);
                    if (appInt != null) {
                        ThreatLikelihoodInterval ti = new ThreatLikelihoodInterval(appInt, probability, intervalLen);
                        threatModel.addLikelihood(ti);
                        return; //OK
                    } else {
                        ERROR = true;
                        logger.warn("*** Cannot process -- ThreatModel XML [handle_ApplicabilityInterval()] could not find an applicabilityInterval for intervalLength="+period);                                
                    }
                } else {
                    ERROR = true;
                    logger.warn("*** Cannot process -- ThreatModel XML contains invalid value. period="+period+" , intervalLength="+interval+" , probability="+prob);                                
                }
             }
        } catch (NumberFormatException nfe) {
            ERROR = true;
            logger.warn("*** Cannot process -- ThreatModel XML [handle_ApplicabilityInterval()] saw a NumberFormatException converting intervalLength to an int, or probability to a double. Exception was " + nfe);            
        } catch (Exception e) {
            ERROR = true;
            logger.warn("*** Cannot process -- ThreatModel XML [handle_ApplicabilityInterval()] saw invalid value. Exception was " + e);            
        }
    }
    
    public void start_Likelihood(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_Likelihood: " + meta);
        //do nothing
    }
    
    public void end_Likelihood() throws SAXException {
        if (DEBUG) System.err.println("end_Likelihood()");
        //do nothing
    }
    
    public void handle_Filter(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_Filter: " + meta);
        if (!ERROR) {                        
            String propName = meta.getValue("propName");
            String propValue = meta.getValue("propValue");
            String op = meta.getValue("op");
            String type = meta.getValue("propType");
            ThreatMembershipFilter tmf = new ThreatMembershipFilter(propName, propValue, type, op);
            threatModel.addFilter(tmf);            
        }
    }
    
    public void start_Distribution(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_Distribution: ....." + meta);
        
        //Set assetStateName= ...;
        if (meta == null) {
           logger.warn("*** Cannot process -- ThreatModel XML [start_Distribution()]: meta is null");
           ERROR= true;
           return;
        }
        
        String name = meta.getValue("name");
        if (name == null) {
           logger.warn("*** Cannot process -- ThreatModel XML [start_Distribution()]: name is null");
           ERROR= true;
           return;
        }
        if (assetType == null) {
           logger.warn("*** Cannot process -- ThreatModel XML [start_Distribution()]: assetType is null");
           ERROR= true;
           return;
        }

        try {
            assetStateName = assetType.findStateDimension(name);
        } catch (Exception e) {
            ERROR = true;
            logger.warn("*** Cannot process -- ThreatModel XML [start_Distribution()] - exception seen. ", e);
        }
        
        if (assetStateName == null) {
           logger.warn("*** Cannot process -- ThreatModel XML [start_Distribution()]: assetStateName="+name+" not found for assetType=" +assetType);
           ERROR= true;
           return;
        }
        
    }
    
    public void end_Distribution() throws SAXException {
        if (DEBUG) System.err.println("end_Distribution()");
        assetStateName = null;
    }
    
    public void start_DamageVector(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_DamageVector: " + meta);
        //do nothing
    }
    
    public void end_DamageVector() throws SAXException {
        if (DEBUG) System.err.println("end_DamageVector()");
        //do nothing
    }
    
    public void handle_Transition(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_Transition()");
        if (assetStateName == null) {
           logger.warn("*** Cannot process -- ThreatModel XML [handle_Transition()] assetStateName is null");
           ERROR= true;
           return;
        }
        
        if (meta == null) {
           logger.warn("*** Cannot process -- ThreatModel XML [handle_Transition()]: meta is null");
           ERROR= true;
           return;
        }

        if (!ERROR) {
            
            String prob = null;
            try {
                String start = meta.getValue("startState");
                String end = meta.getValue("endState");
                prob = meta.getValue("probability");

                if (start != null && end != null && prob != null) {
                    AssetState startState = assetStateName.findAssetState(start);
                    AssetState endState = assetStateName.findAssetState(end);

                    if (startState != null && endState != null ) {
                    
                        double probability = Double.parseDouble(prob);

                        DamageDistribution dd = new DamageDistribution(assetStateName, startState, endState, probability );
                        threatModel.addDistribution(dd);
                        return;
                    } else {
                        ERROR = true;
                        if (startState == null) {
                            logger.warn("*** Cannot process -- ThreatModel XML [handle_Transition()] - Could not find StateValue for startState: "+start+"="+startState);
                        } else {
                            logger.warn("*** Cannot process -- ThreatModel XML [handle_Transition()] - Could not find StateValue for endState: "+end+"="+endState);
                        }
                        return;
                    }
                } else {
                    ERROR = true;
                    logger.warn("*** Cannot process -- ThreatModel XML [handle_Transition()] - null values seen: startState="+start+" , endState="+end+" , probability="+prob);
                    return;
                }
                
            } catch (NumberFormatException nfe) {
                ERROR = true;
                logger.warn("*** Cannot process -- ThreatModel XML [handle_Transition()] - exception converting probability to a double. probability =" + prob);            
            } catch (Exception e) {
                ERROR = true;
                logger.warn("*** Cannot process -- ThreatModel XML [handle_Transition()] - unknown exception.", e);            
            }
        }
    }
    
    /**
     * A generic  container element start event handling method.
     * @param meta attributes
     */
    public void start_Element(java.lang.String ns, java.lang.String name, java.lang.String qname, Attributes attrs) throws SAXException {

        logger.warn("*** Saw unknown start element!  --->" + qname );            
        
    }
    
    /**
     * A generic container element end event handling method.
     */
    public void end_Element(java.lang.String ns, java.lang.String name, java.lang.String qname) throws SAXException {
        
        logger.warn("*** Saw unknown end element!  --->" + qname );            
    }
    
    /**
     * Values that need to be reset between threat models
     */
    public void resetValues() {
        assetType = null;
        threatModel = null;
        assetStateName = null;
        ERROR = false;
    }
    
}

