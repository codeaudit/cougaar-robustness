//PLAYS FOR "NodeA" 

// Combine local conditions to set the DefenseApplicable condition for the Coordinator

(PlannedDisconnect.UnscheduledDisconnect.Node.NodeA == TRUE)
	: ApplicableNodeA = TRUE;

(PlannedDisconnect.ScheduledDisconnect.Node.NodeA == TRUE)
	: ApplicableNodeA = TRUE;


(PlannedDisconnect.ScheduledDisconnect.Node.NodeA == FALSE) & 
(PlannedDisconnect.UnscheduledDisconnect.Node.NodeA == FALSE)
	: ApplicableNodeA = FALSE;


ApplicableNodeA == TRUE
	: PlannedDisconnect.Applicable.Node.NodeA = TRUE;

ApplicableNodeA == FALSE
	: PlannedDisconnect.Applicable.Node.NodeA = FALSE;




// Coordinator logic says this Defense always gets to do what it wants

ApplicableNodeA == TRUE 
	: DefenseNodeA = ENABLED
	: MonitoringNodeA = ENABLED;

ApplicableNodeA == FALSE 
	: DefenseNodeA = DISABLED
	: MonitoringNodeA = DISABLED;


DefenseNodeA == ENABLED
	: PlannedDisconnect.Defense.Node.NodeA = ENABLED;

DefenseNodeA == DISABLED
	: PlannedDisconnect.Defense.Node.NodeA = DISABLED;

MonitoringNodeA == ENABLED
	: PlannedDisconnect.Monitoring.Node.NodeA = ENABLED;

MonitoringNodeA == DISABLED
	: PlannedDisconnect.Monitoring.Node.NodeA = DISABLED;




// Transfer OpModes back to the right Defense instances

(MonitoringNodeA == ENABLED)  &
(PlannedDisconnect.UnscheduledDisconnect.Node.NodeA == TRUE) & 
(PlannedDisconnect.UnscheduledReconnectTime.Node.NodeA > 0)
	: [agent.NodeA]PlannedDisconnect.NodeMonitoring.Node.NodeA = DISABLED
	: PlannedDisconnect.NodeMonitoring.Node.NodeA = ENABLED;

(MonitoringNodeA == ENABLED) &
(PlannedDisconnect.ScheduledDisconnect.Node.NodeA == TRUE) & 
(PlannedDisconnect.ScheduledReconnectTime.Node.NodeA > 0)
	: [agent.NodeA]PlannedDisconnect.NodeMonitoring.Node.NodeA = DISABLED
	: PlannedDisconnect.ManagerMonitoring.Node.NodeA = ENABLED;

(MonitoringNodeA == DISABLED)
	: PlannedDisconnect.ManagerMonitoring.Node.NodeA = DISABLED
	: [agent.NodeA]PlannedDisconnect.NodeMonitoring.Node.NodeA = DISABLED;

(PlannedDisconnect.ScheduledReconnectTime.Node.NodeA == 0)
	: PlannedDisconnect.ManagerMonitoring.Node.NodeA = DISABLED;

(PlannedDisconnect.UnscheduledReconnectTime.Node.NodeA == 0)
	: PlannedDisconnect.NodeMonitoring.NodeA = DISABLED;

(DefenseNodeA == ENABLED)
	: PlannedDisconnect.ManagerDefense.Node.NodeA = ENABLED
	: [agent.NodeA]PlannedDisconnect.NodeDefense.Node.NodeA = ENABLED;

(DefenseNodeA == DISABLED)
	: PlannedDisconnect.ManagerDefense.Node.NodeA = DISABLED
	: [agent.NodeA]PlannedDisconnect.NodeDefense.Node.NodeA = DISABLED;




//PLAYS FOR "NodeB" 


// Combine local conditions to set the DefenseApplicable condition for the Coordinator

(PlannedDisconnect.UnscheduledDisconnect.Node.NodeB == TRUE)
	: ApplicableNodeB = TRUE;

(PlannedDisconnect.ScheduledDisconnect.Node.NodeB == TRUE)
	: ApplicableNodeB = TRUE;


(PlannedDisconnect.ScheduledDisconnect.Node.NodeB == FALSE) & 
(PlannedDisconnect.UnscheduledDisconnect.Node.NodeB == FALSE)
	: ApplicableNodeB = FALSE;


ApplicableNodeB == TRUE
	: PlannedDisconnect.Applicable.Node.NodeB = TRUE;

ApplicableNodeB == FALSE
	: PlannedDisconnect.Applicable.Node.NodeB = FALSE;




// Coordinator logic says this Defense always gets to do what it wants

ApplicableNodeB == TRUE 
	: DefenseNodeB = ENABLED
	: MonitoringNodeB = ENABLED;

ApplicableNodeB == FALSE 
	: DefenseNodeB = DISABLED
	: MonitoringNodeB = DISABLED;


DefenseNodeB == ENABLED
	: PlannedDisconnect.Defense.Node.NodeB = ENABLED;

DefenseNodeB == DISABLED
	: PlannedDisconnect.Defense.Node.NodeB = DISABLED;

MonitoringNodeB == ENABLED
	: PlannedDisconnect.Monitoring.Node.NodeB = ENABLED;

MonitoringNodeB == DISABLED
	: PlannedDisconnect.Monitoring.Node.NodeB = DISABLED;




// Transfer OpModes back to the right Defense instances

(MonitoringNodeB == ENABLED)  &
(PlannedDisconnect.UnscheduledDisconnect.Node.NodeB == TRUE) & 
(PlannedDisconnect.UnscheduledReconnectTime.Node.NodeB > 0)
	: [agent.NodeB]PlannedDisconnect.NodeMonitoring.Node.NodeB = DISABLED
	: PlannedDisconnect.NodeMonitoring.Node.NodeB = ENABLED;

(MonitoringNodeB == ENABLED) &
(PlannedDisconnect.ScheduledDisconnect.Node.NodeB == TRUE) & 
(PlannedDisconnect.ScheduledReconnectTime.Node.NodeB > 0)
	: [agent.NodeB]PlannedDisconnect.NodeMonitoring.Node.NodeB = DISABLED
	: PlannedDisconnect.ManagerMonitoring.Node.NodeB = ENABLED;

(MonitoringNodeB == DISABLED)
	: PlannedDisconnect.ManagerMonitoring.Node.NodeB = DISABLED
	: [agent.NodeB]PlannedDisconnect.NodeMonitoring.Node.NodeB = DISABLED;

(PlannedDisconnect.ScheduledReconnectTime.Node.NodeB == 0)
	: PlannedDisconnect.ManagerMonitoring.Node.NodeB = DISABLED;

(PlannedDisconnect.UnscheduledReconnectTime.Node.NodeB == 0)
	: PlannedDisconnect.NodeMonitoring.NodeB = DISABLED;

(DefenseNodeB == ENABLED)
	: PlannedDisconnect.ManagerDefense.Node.NodeB = ENABLED
	: [agent.NodeB]PlannedDisconnect.NodeDefense.Node.NodeB = ENABLED;

(DefenseNodeB == DISABLED)
	: PlannedDisconnect.ManagerDefense.Node.NodeB = DISABLED
	: [agent.NodeB]PlannedDisconnect.NodeDefense.Node.NodeB = DISABLED;
