

// Combine local conditions to set the DefenseApplicable condition for the Coordinator

(PlannedDisconnect.UnscheduledDisconnect.Node.NodeA == TRUE)
	: PlannedDisconnect.Applicable.Node.NodeA = TRUE;

//(PlannedDisconnect.ScheduledDisconnect.Node.NodeA == TRUE)
//	: PlannedDisconnect.Applicable.Node.NodeA = TRUE;


//(PlannedDisconnect.ScheduledDisconnect.Node.NodeA == FALSE) & 
(PlannedDisconnect.UnscheduledDisconnect.Node.NodeA == FALSE)
	: PlannedDisconnect.Applicable.Node.NodeA = FALSE;




// Transfer OpModes back to the right Defense instances

(PlannedDisconnect.Monitoring.Node.NodeA == ENABLED)  & 
(PlannedDisconnect.UnscheduledReconnectTime.Node.NodeA > 0)
	: [agent.NodeA]PlannedDisconnect.NodeMonitoring.Node.NodeA = ENABLED;

//(PlannedDisconnect.Monitoring.Node.NodeA == ENABLED) & 
//(PlannedDisconnect.ScheduledReconnectTime.Node.NodeA > 0)
//	: PlannedDisconnect.Monitoring.Node.NodeA = ENABLED;

(PlannedDisconnect.Monitoring.Node.NodeA == DISABLED)
	: PlannedDisconnect.Monitoring.Node.NodeA = DISABLED
	: [agent.NodeA]PlannedDisconnect.NodeMonitoring.Node.NodeA = DISABLED;

//(PlannedDisconnect.ScheduledReconnectTime.Node.NodeA == 0)
//	: PlannedDisconnect.CommunityMonitoring.Node.NodeA = DISABLED;

(PlannedDisconnect.UnscheduledReconnectTime.Node.NodeA == 0)
	: [agent.NodeA]PlannedDisconnect.NodeMonitoring.NodeA = DISABLED;




// Coordinator logic says this Defense always gets to do what it wants

PlannedDisconnect.Applicable.Node.NodeA == TRUE 
	: PlannedDisconnect.Defense.Node.NodeA = ENABLED
	: PlannedDisconnect.Monitoring.Node.NodeA = ENABLED;

PlannedDisconnect.Applicable.Node.NodeA == FALSE 
	: PlannedDisconnect.Defense.Node.NodeA = DISABLED
	: PlannedDisconnect.Monitoring.Node.NodeA = DISABLED;